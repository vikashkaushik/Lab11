
c:/Users/Vikash/Downloads/Lab11/target/3.0.0/argon/Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003524  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e550  000d7544  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000238  2003e5b8  2003e5b8  0002e5b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75ac  000d75ac  000275ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75d4  000d75d4  000275d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001bb28f  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a172  00000000  00000000  001e2867  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00036298  00000000  00000000  001fc9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002df0  00000000  00000000  00232c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009940  00000000  00000000  00235a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003cd21  00000000  00000000  0023f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000430e9  00000000  00000000  0027c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012a832  00000000  00000000  002bf1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008004  00000000  00000000  003e99e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fcd9 	bl	d69e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fce1 	bl	d6a00 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e550 	.word	0x2003e550
   d4048:	000d7544 	.word	0x000d7544
   d404c:	2003e5b8 	.word	0x2003e5b8
   d4050:	2003e5b8 	.word	0x2003e5b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fcbb 	bl	d59d8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7514 	.word	0x000d7514
   d407c:	000d7538 	.word	0x000d7538

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bc5e 	b.w	d4940 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd7d 	bl	d4b84 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bc65 	b.w	d595c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b9d7 	b.w	d5444 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b9d5 	b.w	d5444 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b9db 	b.w	d5454 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f920 	bl	d52ec <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d503d 	.word	0x000d503d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c4:	4770      	bx	lr

000d40c6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40c6:	b510      	push	{r4, lr}
  }
   d40c8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40ca:	4604      	mov	r4, r0
  }
   d40cc:	f002 fb5d 	bl	d678a <_ZdlPvj>
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40d8:	4608      	mov	r0, r1
   d40da:	9101      	str	r1, [sp, #4]
   d40dc:	f002 fcc6 	bl	d6a6c <strlen>
    if (len + l > buff_size)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40e4:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40e6:	18e8      	adds	r0, r5, r3
   d40e8:	4290      	cmp	r0, r2
   d40ea:	d808      	bhi.n	d40fe <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40ec:	6820      	ldr	r0, [r4, #0]
   d40ee:	9901      	ldr	r1, [sp, #4]
   d40f0:	462a      	mov	r2, r5
   d40f2:	4418      	add	r0, r3
   d40f4:	f002 fc76 	bl	d69e4 <memcpy>
    len += l;
   d40f8:	6860      	ldr	r0, [r4, #4]
   d40fa:	4428      	add	r0, r5
   d40fc:	6060      	str	r0, [r4, #4]
}
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4104:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4106:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4108:	4b0a      	ldr	r3, [pc, #40]	; (d4134 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d410a:	6003      	str	r3, [r0, #0]
   d410c:	4605      	mov	r5, r0
   d410e:	b17c      	cbz	r4, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4110:	6863      	ldr	r3, [r4, #4]
   d4112:	3b01      	subs	r3, #1
   d4114:	6063      	str	r3, [r4, #4]
   d4116:	b95b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4120:	68a3      	ldr	r3, [r4, #8]
   d4122:	3b01      	subs	r3, #1
   d4124:	60a3      	str	r3, [r4, #8]
   d4126:	b91b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	68db      	ldr	r3, [r3, #12]
   d412e:	4798      	blx	r3
   d4130:	4628      	mov	r0, r5
   d4132:	bd38      	pop	{r3, r4, r5, pc}
   d4134:	000d7260 	.word	0x000d7260

000d4138 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4138:	b40e      	push	{r1, r2, r3}
   d413a:	b503      	push	{r0, r1, lr}
   d413c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4140:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4144:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4146:	f001 fb60 	bl	d580a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d414a:	b002      	add	sp, #8
   d414c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4150:	b003      	add	sp, #12
   d4152:	4770      	bx	lr

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f001 bb13 	b.w	d5794 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd8 	bl	d4138 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d6bd1 	.word	0x000d6bd1
   d4194:	000d6bc8 	.word	0x000d6bc8
   d4198:	000d6bcd 	.word	0x000d6bcd
   d419c:	000d6bc9 	.word	0x000d6bc9
   d41a0:	000d6be7 	.word	0x000d6be7
   d41a4:	000d6bc0 	.word	0x000d6bc0

000d41a8 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41a8:	b40e      	push	{r1, r2, r3}
   d41aa:	b503      	push	{r0, r1, lr}
   d41ac:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d41ae:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41b4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d41b6:	f001 fb28 	bl	d580a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41ba:	b002      	add	sp, #8
   d41bc:	f85d eb04 	ldr.w	lr, [sp], #4
   d41c0:	b003      	add	sp, #12
   d41c2:	4770      	bx	lr

000d41c4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41c4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41c6:	f000 ff41 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ca:	4b03      	ldr	r3, [pc, #12]	; (d41d8 <_ZN10CloudClass7processEv+0x14>)
   d41cc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41d2:	f001 b927 	b.w	d5424 <spark_process>
   d41d6:	bf00      	nop
   d41d8:	2003e7d4 	.word	0x2003e7d4

000d41dc <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41dc:	6803      	ldr	r3, [r0, #0]
   d41de:	b12b      	cbz	r3, d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41e0:	6842      	ldr	r2, [r0, #4]
   d41e2:	4293      	cmp	r3, r2
   d41e4:	d202      	bcs.n	d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41e6:	4618      	mov	r0, r3
   d41e8:	f002 bbe6 	b.w	d69b8 <atoi>
   d41ec:	2000      	movs	r0, #0
   d41ee:	4770      	bx	lr

000d41f0 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41f0:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f2:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d41f4:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f6:	b145      	cbz	r5, d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d41f8:	6843      	ldr	r3, [r0, #4]
   d41fa:	429d      	cmp	r5, r3
   d41fc:	d205      	bcs.n	d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d41fe:	4628      	mov	r0, r5
   d4200:	f002 fc34 	bl	d6a6c <strlen>
   d4204:	3001      	adds	r0, #1
   d4206:	4405      	add	r5, r0
   d4208:	6025      	str	r5, [r4, #0]
        }
   d420a:	4620      	mov	r0, r4
   d420c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4210 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4210:	b538      	push	{r3, r4, r5, lr}
   d4212:	4604      	mov	r4, r0
   d4214:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4216:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d421a:	6825      	ldr	r5, [r4, #0]
   d421c:	4a04      	ldr	r2, [pc, #16]	; (d4230 <_ZN10BlynkParam3addEi+0x20>)
   d421e:	1a09      	subs	r1, r1, r0
   d4220:	4428      	add	r0, r5
   d4222:	f001 f91f 	bl	d5464 <snprintf>
   d4226:	6863      	ldr	r3, [r4, #4]
   d4228:	3001      	adds	r0, #1
   d422a:	4403      	add	r3, r0
   d422c:	6063      	str	r3, [r4, #4]
    }
   d422e:	bd38      	pop	{r3, r4, r5, pc}
   d4230:	000d6c04 	.word	0x000d6c04

000d4234 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4234:	b538      	push	{r3, r4, r5, lr}
   d4236:	4604      	mov	r4, r0
   d4238:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d423a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d423e:	6825      	ldr	r5, [r4, #0]
   d4240:	4a04      	ldr	r2, [pc, #16]	; (d4254 <_ZN10BlynkParam3addEl+0x20>)
   d4242:	1a09      	subs	r1, r1, r0
   d4244:	4428      	add	r0, r5
   d4246:	f001 f90d 	bl	d5464 <snprintf>
   d424a:	6863      	ldr	r3, [r4, #4]
   d424c:	3001      	adds	r0, #1
   d424e:	4403      	add	r3, r0
   d4250:	6063      	str	r3, [r4, #4]
    }
   d4252:	bd38      	pop	{r3, r4, r5, pc}
   d4254:	000d6c07 	.word	0x000d6c07

000d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4258:	b508      	push	{r3, lr}
        state = CONNECTING;
   d425a:	2300      	movs	r3, #0
   d425c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d425e:	6800      	ldr	r0, [r0, #0]
   d4260:	f001 ffcc 	bl	d61fc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d4268:	f000 be72 	b.w	d4f50 <BlynkNoOpCbk>

000d426c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d4270:	eb01 0902 	add.w	r9, r1, r2
   d4274:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4276:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4278:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d427c:	4680      	mov	r8, r0
   d427e:	460d      	mov	r5, r1
   d4280:	4616      	mov	r6, r2
    if (it >= param.end())
   d4282:	f080 8092 	bcs.w	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4286:	a805      	add	r0, sp, #20
   d4288:	880f      	ldrh	r7, [r1, #0]
   d428a:	f7ff ffb1 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d428e:	6803      	ldr	r3, [r0, #0]
   d4290:	4599      	cmp	r9, r3
   d4292:	f240 808a 	bls.w	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4296:	a805      	add	r0, sp, #20
   d4298:	f7ff ffa0 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d429c:	f247 2376 	movw	r3, #29302	; 0x7276
   d42a0:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42a2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d42a4:	f000 80a9 	beq.w	d43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d42a8:	d827      	bhi.n	d42fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d42aa:	f247 2361 	movw	r3, #29281	; 0x7261
   d42ae:	429f      	cmp	r7, r3
   d42b0:	d07e      	beq.n	d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d42b2:	f247 2364 	movw	r3, #29284	; 0x7264
   d42b6:	429f      	cmp	r7, r3
   d42b8:	d042      	beq.n	d4340 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d42ba:	f646 5370 	movw	r3, #28016	; 0x6d70
   d42be:	429f      	cmp	r7, r3
   d42c0:	d128      	bne.n	d4314 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d42c2:	4e63      	ldr	r6, [pc, #396]	; (d4450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42c4:	4f63      	ldr	r7, [pc, #396]	; (d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d42c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d42ca:	9b05      	ldr	r3, [sp, #20]
   d42cc:	4599      	cmp	r9, r3
   d42ce:	d96c      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42d0:	a805      	add	r0, sp, #20
   d42d2:	f7ff ff83 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d42d6:	b2c4      	uxtb	r4, r0
            ++it;
   d42d8:	a805      	add	r0, sp, #20
   d42da:	f7ff ff89 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d42de:	9d05      	ldr	r5, [sp, #20]
   d42e0:	4631      	mov	r1, r6
   d42e2:	4628      	mov	r0, r5
   d42e4:	f002 fbb8 	bl	d6a58 <strcmp>
   d42e8:	4601      	mov	r1, r0
   d42ea:	b9e0      	cbnz	r0, d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d42ec:	4620      	mov	r0, r4
   d42ee:	f002 f98d 	bl	d660c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42f2:	a805      	add	r0, sp, #20
   d42f4:	f7ff ff7c 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d42f8:	e7e7      	b.n	d42ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d42fa:	f247 7364 	movw	r3, #30564	; 0x7764
   d42fe:	429f      	cmp	r7, r3
   d4300:	d03f      	beq.n	d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d4302:	f247 7376 	movw	r3, #30582	; 0x7776
   d4306:	429f      	cmp	r7, r3
   d4308:	f000 8087 	beq.w	d441a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d430c:	f247 7361 	movw	r3, #30561	; 0x7761
   d4310:	429f      	cmp	r7, r3
   d4312:	d05f      	beq.n	d43d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4314:	2300      	movs	r3, #0
   d4316:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d431a:	2202      	movs	r2, #2
   d431c:	9200      	str	r2, [sp, #0]
   d431e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4322:	4619      	mov	r1, r3
   d4324:	e029      	b.n	d437a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4326:	4639      	mov	r1, r7
   d4328:	4628      	mov	r0, r5
   d432a:	f002 fb95 	bl	d6a58 <strcmp>
   d432e:	b128      	cbz	r0, d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4330:	4641      	mov	r1, r8
   d4332:	4628      	mov	r0, r5
   d4334:	f002 fb90 	bl	d6a58 <strcmp>
   d4338:	2800      	cmp	r0, #0
   d433a:	d1da      	bne.n	d42f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d433c:	2101      	movs	r1, #1
   d433e:	e7d5      	b.n	d42ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4340:	ab0a      	add	r3, sp, #40	; 0x28
   d4342:	4945      	ldr	r1, [pc, #276]	; (d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d4344:	9307      	str	r3, [sp, #28]
   d4346:	a807      	add	r0, sp, #28
   d4348:	2310      	movs	r3, #16
   d434a:	2500      	movs	r5, #0
   d434c:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4350:	f7ff fec0 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4354:	a807      	add	r0, sp, #28
   d4356:	4621      	mov	r1, r4
   d4358:	f7ff ff5a 	bl	d4210 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d435c:	4620      	mov	r0, r4
   d435e:	f002 f97f 	bl	d6660 <digitalRead>
        rsp.add(analogRead(pin));
   d4362:	4601      	mov	r1, r0
   d4364:	a807      	add	r0, sp, #28
   d4366:	f7ff ff65 	bl	d4234 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d436a:	9b08      	ldr	r3, [sp, #32]
   d436c:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4370:	3b01      	subs	r3, #1
   d4372:	9300      	str	r3, [sp, #0]
   d4374:	9b07      	ldr	r3, [sp, #28]
   d4376:	462a      	mov	r2, r5
   d4378:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d437a:	4640      	mov	r0, r8
   d437c:	f000 fb18 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4380:	e013      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d4382:	a805      	add	r0, sp, #20
   d4384:	f7ff ff34 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	4599      	cmp	r9, r3
   d438c:	d90d      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d438e:	b2a4      	uxth	r4, r4
   d4390:	2101      	movs	r1, #1
   d4392:	4620      	mov	r0, r4
   d4394:	f002 f93a 	bl	d660c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4398:	a805      	add	r0, sp, #20
   d439a:	f7ff ff1f 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d439e:	1e01      	subs	r1, r0, #0
   d43a0:	bf18      	it	ne
   d43a2:	2101      	movne	r1, #1
   d43a4:	4620      	mov	r0, r4
   d43a6:	f002 f942 	bl	d662e <digitalWrite>
    }
}
   d43aa:	b00f      	add	sp, #60	; 0x3c
   d43ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43b0:	ab0a      	add	r3, sp, #40	; 0x28
   d43b2:	9307      	str	r3, [sp, #28]
   d43b4:	a807      	add	r0, sp, #28
   d43b6:	2310      	movs	r3, #16
   d43b8:	4928      	ldr	r1, [pc, #160]	; (d445c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d43ba:	2500      	movs	r5, #0
   d43bc:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43c0:	f7ff fe88 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d43c4:	a807      	add	r0, sp, #28
   d43c6:	4621      	mov	r1, r4
   d43c8:	f7ff ff22 	bl	d4210 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d43cc:	4620      	mov	r0, r4
   d43ce:	f002 f95a 	bl	d6686 <analogRead>
   d43d2:	e7c6      	b.n	d4362 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d43d4:	a805      	add	r0, sp, #20
   d43d6:	f7ff ff0b 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d43da:	6803      	ldr	r3, [r0, #0]
   d43dc:	4599      	cmp	r9, r3
   d43de:	d9e4      	bls.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d43e0:	b2a4      	uxth	r4, r4
   d43e2:	2101      	movs	r1, #1
   d43e4:	4620      	mov	r0, r4
   d43e6:	f002 f911 	bl	d660c <pinMode>
        analogWrite(pin, it.asInt());
   d43ea:	a805      	add	r0, sp, #20
   d43ec:	f7ff fef6 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d43f0:	4601      	mov	r1, r0
   d43f2:	4620      	mov	r0, r4
   d43f4:	f002 f95e 	bl	d66b4 <_Z11analogWritetm>
    } break;
   d43f8:	e7d7      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d43fa:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d43fc:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4400:	f000 fda8 	bl	d4f54 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4404:	4603      	mov	r3, r0
            handler(req);
   d4406:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4408:	b123      	cbz	r3, d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d440a:	4a15      	ldr	r2, [pc, #84]	; (d4460 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d440c:	4293      	cmp	r3, r2
   d440e:	d001      	beq.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4410:	4798      	blx	r3
   d4412:	e7ca      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d4414:	f000 fd9a 	bl	d4f4c <BlynkWidgetRead>
        }
    }
   d4418:	e7c7      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d441a:	a805      	add	r0, sp, #20
   d441c:	f7ff fee8 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4420:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4422:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4426:	1b5d      	subs	r5, r3, r5
   d4428:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d442a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d442c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4430:	950c      	str	r5, [sp, #48]	; 0x30
   d4432:	f000 fd99 	bl	d4f68 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4436:	4603      	mov	r3, r0
            handler(req, param);
   d4438:	a90a      	add	r1, sp, #40	; 0x28
   d443a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d443c:	b123      	cbz	r3, d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d443e:	4a09      	ldr	r2, [pc, #36]	; (d4464 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4440:	4293      	cmp	r3, r2
   d4442:	d001      	beq.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d4444:	4798      	blx	r3
   d4446:	e7b0      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d4448:	f000 fd81 	bl	d4f4e <BlynkWidgetWrite>
    } break;
   d444c:	e7ad      	b.n	d43aa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d444e:	bf00      	nop
   d4450:	000d6c0b 	.word	0x000d6c0b
   d4454:	000d6c0e 	.word	0x000d6c0e
   d4458:	000d6c16 	.word	0x000d6c16
   d445c:	000d6c19 	.word	0x000d6c19
   d4460:	000d4f4d 	.word	0x000d4f4d
   d4464:	000d4f4f 	.word	0x000d4f4f
   d4468:	000d6c12 	.word	0x000d6c12

000d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4470:	b08c      	sub	sp, #48	; 0x30
   d4472:	af04      	add	r7, sp, #16
   d4474:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4476:	2205      	movs	r2, #5
   d4478:	6800      	ldr	r0, [r0, #0]
   d447a:	1d39      	adds	r1, r7, #4
   d447c:	f001 fa0b 	bl	d5896 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4480:	b3b8      	cbz	r0, d44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4482:	2805      	cmp	r0, #5
   d4484:	d004      	beq.n	d4490 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4486:	2000      	movs	r0, #0
}
   d4488:	3720      	adds	r7, #32
   d448a:	46bd      	mov	sp, r7
   d448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4490:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4494:	0a13      	lsrs	r3, r2, #8
   d4496:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d449a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d449e:	f8a7 3005 	strh.w	r3, [r7, #5]
   d44a2:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d44a4:	0a13      	lsrs	r3, r2, #8
   d44a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44aa:	fa1f f883 	uxth.w	r8, r3
   d44ae:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d44b2:	2900      	cmp	r1, #0
   d44b4:	d0e7      	beq.n	d4486 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d44b6:	793b      	ldrb	r3, [r7, #4]
   d44b8:	bb23      	cbnz	r3, d4504 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d44ba:	f000 fd45 	bl	d4f48 <_Z11BlynkMillisv>
   d44be:	4602      	mov	r2, r0
   d44c0:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44c2:	7f60      	ldrb	r0, [r4, #29]
   d44c4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44c8:	b9c0      	cbnz	r0, d44fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d44ca:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d44ce:	2901      	cmp	r1, #1
   d44d0:	d114      	bne.n	d44fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d44d2:	2b09      	cmp	r3, #9
   d44d4:	d00f      	beq.n	d44f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d44d6:	2bc8      	cmp	r3, #200	; 0xc8
   d44d8:	d001      	beq.n	d44de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d44da:	2b04      	cmp	r3, #4
   d44dc:	d1d4      	bne.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d44de:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d44e0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d44e2:	4620      	mov	r0, r4
                state = CONNECTED;
   d44e4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d44e6:	f000 fb11 	bl	d4b0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d44ea:	f7ff fe6b 	bl	d41c4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d44ee:	f000 fd2f 	bl	d4f50 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d44f2:	2001      	movs	r0, #1
   d44f4:	e7c8      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d44f6:	2303      	movs	r3, #3
   d44f8:	7763      	strb	r3, [r4, #29]
                break;
   d44fa:	e7c5      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d44fc:	1f58      	subs	r0, r3, #5
   d44fe:	bf18      	it	ne
   d4500:	2001      	movne	r0, #1
   d4502:	e7c1      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4504:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4508:	d903      	bls.n	d4512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d450a:	4620      	mov	r0, r4
   d450c:	f7ff fea4 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4510:	e7ef      	b.n	d44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4512:	f108 0308 	add.w	r3, r8, #8
   d4516:	f023 0307 	bic.w	r3, r3, #7
   d451a:	466e      	mov	r6, sp
   d451c:	ebad 0d03 	sub.w	sp, sp, r3
   d4520:	ad04      	add	r5, sp, #16
   d4522:	6820      	ldr	r0, [r4, #0]
   d4524:	4642      	mov	r2, r8
   d4526:	4629      	mov	r1, r5
   d4528:	f001 f9b5 	bl	d5896 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d452c:	4580      	cmp	r8, r0
   d452e:	f04f 0000 	mov.w	r0, #0
   d4532:	d17f      	bne.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4534:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4538:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d453a:	f000 fd05 	bl	d4f48 <_Z11BlynkMillisv>
    switch (hdr.type)
   d453e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4540:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4542:	2b14      	cmp	r3, #20
   d4544:	f000 80a6 	beq.w	d4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4548:	d848      	bhi.n	d45dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d454a:	2b0f      	cmp	r3, #15
   d454c:	f000 80a2 	beq.w	d4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4550:	d807      	bhi.n	d4562 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4552:	2b02      	cmp	r3, #2
   d4554:	d048      	beq.n	d45e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4556:	2b06      	cmp	r3, #6
   d4558:	d051      	beq.n	d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d455a:	4620      	mov	r0, r4
   d455c:	f7ff fe7c 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4560:	e058      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d4562:	2b11      	cmp	r3, #17
   d4564:	d1f9      	bne.n	d455a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d4566:	2300      	movs	r3, #0
   d4568:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d456a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d456e:	442b      	add	r3, r5
        if (it >= param.end())
   d4570:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4572:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4576:	d24d      	bcs.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4578:	f107 000c 	add.w	r0, r7, #12
   d457c:	f8d5 8000 	ldr.w	r8, [r5]
   d4580:	f7ff fe36 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4584:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4586:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d458a:	1b5d      	subs	r5, r3, r5
   d458c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d458e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d4592:	687b      	ldr	r3, [r7, #4]
   d4594:	61fd      	str	r5, [r7, #28]
   d4596:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d459a:	8363      	strh	r3, [r4, #26]
   d459c:	4b64      	ldr	r3, [pc, #400]	; (d4730 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d459e:	4598      	cmp	r8, r3
   d45a0:	f000 80bf 	beq.w	d4722 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d45a4:	f200 808c 	bhi.w	d46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d45a8:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d45ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d45b0:	4413      	add	r3, r2
   d45b2:	4598      	cmp	r8, r3
   d45b4:	f000 809d 	beq.w	d46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d45b8:	d879      	bhi.n	d46ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d45ba:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d45be:	3b06      	subs	r3, #6
   d45c0:	4598      	cmp	r8, r3
   d45c2:	f000 809c 	beq.w	d46fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d45c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d45ca:	3303      	adds	r3, #3
   d45cc:	4598      	cmp	r8, r3
   d45ce:	d16b      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d45d0:	f107 0114 	add.w	r1, r7, #20
   d45d4:	4638      	mov	r0, r7
   d45d6:	f000 fcba 	bl	d4f4e <BlynkWidgetWrite>
   d45da:	e065      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d45dc:	2b29      	cmp	r3, #41	; 0x29
   d45de:	d01b      	beq.n	d4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d45e0:	2b37      	cmp	r3, #55	; 0x37
   d45e2:	d017      	beq.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d45e4:	2b1d      	cmp	r3, #29
   d45e6:	d1b8      	bne.n	d455a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d45e8:	7f63      	ldrb	r3, [r4, #29]
   d45ea:	b943      	cbnz	r3, d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d45ec:	2301      	movs	r3, #1
   d45ee:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d45f0:	4620      	mov	r0, r4
   d45f2:	f000 fa8b 	bl	d4b0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d45f6:	f7ff fde5 	bl	d41c4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d45fa:	f000 fca9 	bl	d4f50 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d45fe:	2300      	movs	r3, #0
   d4600:	21c8      	movs	r1, #200	; 0xc8
   d4602:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4606:	9100      	str	r1, [sp, #0]
   d4608:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d460c:	4619      	mov	r1, r3
   d460e:	4620      	mov	r0, r4
   d4610:	f000 f9ce 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4614:	2001      	movs	r0, #1
   d4616:	e00d      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4618:	68a3      	ldr	r3, [r4, #8]
   d461a:	b91b      	cbnz	r3, d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d461c:	2040      	movs	r0, #64	; 0x40
   d461e:	f000 ff11 	bl	d5444 <malloc>
   d4622:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4624:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4628:	44a8      	add	r8, r5
        if (it >= param.end())
   d462a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d462c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4630:	d302      	bcc.n	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4632:	2000      	movs	r0, #0
   d4634:	46b5      	mov	sp, r6
   d4636:	e727      	b.n	d4488 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4638:	4629      	mov	r1, r5
   d463a:	2240      	movs	r2, #64	; 0x40
   d463c:	68a0      	ldr	r0, [r4, #8]
   d463e:	f002 fa1d 	bl	d6a7c <strncpy>
        redir_serv[63] = '\0';
   d4642:	68a3      	ldr	r3, [r4, #8]
   d4644:	2500      	movs	r5, #0
   d4646:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d464a:	f107 0014 	add.w	r0, r7, #20
   d464e:	f7ff fdcf 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4652:	6803      	ldr	r3, [r0, #0]
   d4654:	4543      	cmp	r3, r8
   d4656:	d21b      	bcs.n	d4690 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4658:	6978      	ldr	r0, [r7, #20]
   d465a:	b120      	cbz	r0, d4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d465c:	69bb      	ldr	r3, [r7, #24]
   d465e:	4298      	cmp	r0, r3
   d4660:	d214      	bcs.n	d468c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4662:	f002 f9ad 	bl	d69c0 <atol>
            redir_port = it.asLong();
   d4666:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4668:	6820      	ldr	r0, [r4, #0]
   d466a:	f001 fdc7 	bl	d61fc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d466e:	6823      	ldr	r3, [r4, #0]
   d4670:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4672:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4674:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4676:	2300      	movs	r3, #0
   d4678:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d467a:	f000 fc65 	bl	d4f48 <_Z11BlynkMillisv>
   d467e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4682:	3808      	subs	r0, #8
   d4684:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4688:	6160      	str	r0, [r4, #20]
   d468a:	e7c3      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d468c:	4628      	mov	r0, r5
   d468e:	e7ea      	b.n	d4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4690:	2550      	movs	r5, #80	; 0x50
   d4692:	e7e9      	b.n	d4668 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4694:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4696:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d469a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d469e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d46a0:	4629      	mov	r1, r5
   d46a2:	4620      	mov	r0, r4
   d46a4:	f7ff fde2 	bl	d426c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d46a8:	2300      	movs	r3, #0
   d46aa:	8363      	strh	r3, [r4, #26]
   d46ac:	e7b2      	b.n	d4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46ae:	4b21      	ldr	r3, [pc, #132]	; (d4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d46b0:	4598      	cmp	r8, r3
   d46b2:	d1f9      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d46b4:	f107 0114 	add.w	r1, r7, #20
   d46b8:	4638      	mov	r0, r7
   d46ba:	f000 fc48 	bl	d4f4e <BlynkWidgetWrite>
   d46be:	e7f3      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46c0:	4b1d      	ldr	r3, [pc, #116]	; (d4738 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d46c2:	4598      	cmp	r8, r3
   d46c4:	d021      	beq.n	d470a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d46c6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d46ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d46ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d46d2:	4598      	cmp	r8, r3
   d46d4:	d01f      	beq.n	d4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d46d6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d46da:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d46de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d46e2:	4598      	cmp	r8, r3
   d46e4:	d1e0      	bne.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d46e6:	f107 0114 	add.w	r1, r7, #20
   d46ea:	4638      	mov	r0, r7
   d46ec:	f000 fc2f 	bl	d4f4e <BlynkWidgetWrite>
   d46f0:	e7da      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d46f2:	f107 0114 	add.w	r1, r7, #20
   d46f6:	4638      	mov	r0, r7
   d46f8:	f000 fc29 	bl	d4f4e <BlynkWidgetWrite>
   d46fc:	e7d4      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d46fe:	f107 0114 	add.w	r1, r7, #20
   d4702:	4638      	mov	r0, r7
   d4704:	f000 fc23 	bl	d4f4e <BlynkWidgetWrite>
   d4708:	e7ce      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d470a:	f107 0114 	add.w	r1, r7, #20
   d470e:	4638      	mov	r0, r7
   d4710:	f000 fc1d 	bl	d4f4e <BlynkWidgetWrite>
   d4714:	e7c8      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4716:	f107 0114 	add.w	r1, r7, #20
   d471a:	4638      	mov	r0, r7
   d471c:	f000 fc17 	bl	d4f4e <BlynkWidgetWrite>
   d4720:	e7c2      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4722:	f107 0114 	add.w	r1, r7, #20
   d4726:	4638      	mov	r0, r7
   d4728:	f000 fc11 	bl	d4f4e <BlynkWidgetWrite>
   d472c:	e7bc      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d472e:	bf00      	nop
   d4730:	00736676 	.word	0x00736676
   d4734:	00676264 	.word	0x00676264
   d4738:	6e6f6361 	.word	0x6e6f6361

000d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4740:	4604      	mov	r4, r0
   d4742:	b08c      	sub	sp, #48	; 0x30
   d4744:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4746:	f7ff fd3d 	bl	d41c4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d474a:	7f63      	ldrb	r3, [r4, #29]
   d474c:	2b02      	cmp	r3, #2
   d474e:	f000 80a8 	beq.w	d48a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4752:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4754:	8b62      	ldrh	r2, [r4, #26]
   d4756:	3301      	adds	r3, #1
   d4758:	b2db      	uxtb	r3, r3
   d475a:	7723      	strb	r3, [r4, #28]
   d475c:	b10a      	cbz	r2, d4762 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d475e:	2501      	movs	r5, #1
   d4760:	e016      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d4762:	2b02      	cmp	r3, #2
   d4764:	d8fb      	bhi.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4766:	6820      	ldr	r0, [r4, #0]
   d4768:	f001 fb67 	bl	d5e3a <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d476c:	b1b8      	cbz	r0, d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d476e:	b925      	cbnz	r5, d477a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4770:	6820      	ldr	r0, [r4, #0]
   d4772:	f001 fce9 	bl	d6148 <_ZN9TCPClient9availableEv>
   d4776:	2800      	cmp	r0, #0
   d4778:	dd11      	ble.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff fe76 	bl	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4780:	4605      	mov	r5, r0
   d4782:	2800      	cmp	r0, #0
   d4784:	d1f4      	bne.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4786:	6820      	ldr	r0, [r4, #0]
   d4788:	f001 fd38 	bl	d61fc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d478c:	f000 fbe0 	bl	d4f50 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4790:	7f23      	ldrb	r3, [r4, #28]
   d4792:	3b01      	subs	r3, #1
   d4794:	7723      	strb	r3, [r4, #28]
}
   d4796:	4628      	mov	r0, r5
   d4798:	b00c      	add	sp, #48	; 0x30
   d479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d479e:	f000 fbd3 	bl	d4f48 <_Z11BlynkMillisv>
   d47a2:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d47a4:	6820      	ldr	r0, [r4, #0]
   d47a6:	f001 fb48 	bl	d5e3a <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d47aa:	7f67      	ldrb	r7, [r4, #29]
   d47ac:	2f01      	cmp	r7, #1
   d47ae:	4605      	mov	r5, r0
   d47b0:	d129      	bne.n	d4806 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d47b2:	b920      	cbnz	r0, d47be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d47b4:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d47b6:	4620      	mov	r0, r4
   d47b8:	f7ff fd4e 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47bc:	e7e8      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d47be:	68e3      	ldr	r3, [r4, #12]
   d47c0:	f24f 6218 	movw	r2, #63000	; 0xf618
   d47c4:	1af3      	subs	r3, r6, r3
   d47c6:	4293      	cmp	r3, r2
   d47c8:	d904      	bls.n	d47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d47ca:	4620      	mov	r0, r4
   d47cc:	f7ff fd44 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47d0:	2500      	movs	r5, #0
   d47d2:	e7dd      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47d4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d47d8:	4293      	cmp	r3, r2
   d47da:	d803      	bhi.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47dc:	6923      	ldr	r3, [r4, #16]
   d47de:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47e0:	4293      	cmp	r3, r2
   d47e2:	d9bc      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47e4:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47e6:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d47ea:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47ec:	4293      	cmp	r3, r2
   d47ee:	d9b6      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d47f0:	2300      	movs	r3, #0
   d47f2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d47f6:	9300      	str	r3, [sp, #0]
   d47f8:	461a      	mov	r2, r3
   d47fa:	2106      	movs	r1, #6
   d47fc:	4620      	mov	r0, r4
   d47fe:	f000 f8d7 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4802:	6166      	str	r6, [r4, #20]
   d4804:	e7ab      	b.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4806:	2f00      	cmp	r7, #0
   d4808:	d1a9      	bne.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d480a:	6962      	ldr	r2, [r4, #20]
   d480c:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d480e:	b140      	cbz	r0, d4822 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4810:	f241 7370 	movw	r3, #6000	; 0x1770
   d4814:	429a      	cmp	r2, r3
   d4816:	d9a2      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4818:	6820      	ldr	r0, [r4, #0]
   d481a:	f001 fcef 	bl	d61fc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d481e:	7767      	strb	r7, [r4, #29]
   d4820:	e7d6      	b.n	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4822:	f241 3388 	movw	r3, #5000	; 0x1388
   d4826:	429a      	cmp	r2, r3
   d4828:	d999      	bls.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d482a:	6820      	ldr	r0, [r4, #0]
   d482c:	f001 fce6 	bl	d61fc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4830:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4834:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4838:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d483c:	f1be 0f00 	cmp.w	lr, #0
   d4840:	d00b      	beq.n	d485a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4842:	462b      	mov	r3, r5
   d4844:	4642      	mov	r2, r8
   d4846:	4671      	mov	r1, lr
   d4848:	4660      	mov	r0, ip
   d484a:	f001 fd35 	bl	d62b8 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d484e:	1e43      	subs	r3, r0, #1
   d4850:	425d      	negs	r5, r3
   d4852:	415d      	adcs	r5, r3
   d4854:	b98d      	cbnz	r5, d487a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4856:	6166      	str	r6, [r4, #20]
                return false;
   d4858:	e79a      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d485a:	4b13      	ldr	r3, [pc, #76]	; (d48a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d485c:	9306      	str	r3, [sp, #24]
   d485e:	f10c 0720 	add.w	r7, ip, #32
   d4862:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4864:	ad07      	add	r5, sp, #28
   d4866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4868:	683b      	ldr	r3, [r7, #0]
   d486a:	702b      	strb	r3, [r5, #0]
   d486c:	4642      	mov	r2, r8
   d486e:	4673      	mov	r3, lr
   d4870:	a906      	add	r1, sp, #24
   d4872:	4660      	mov	r0, ip
   d4874:	f001 fbed 	bl	d6052 <_ZN9TCPClient7connectE9IPAddresstm>
   d4878:	e7e9      	b.n	d484e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d487a:	6863      	ldr	r3, [r4, #4]
   d487c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d487e:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4880:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4882:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4884:	f002 f8f2 	bl	d6a6c <strlen>
   d4888:	2200      	movs	r2, #0
   d488a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d488e:	9b05      	ldr	r3, [sp, #20]
   d4890:	9000      	str	r0, [sp, #0]
   d4892:	4632      	mov	r2, r6
   d4894:	211d      	movs	r1, #29
   d4896:	4620      	mov	r0, r4
   d4898:	f000 f88a 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d489c:	6923      	ldr	r3, [r4, #16]
   d489e:	6163      	str	r3, [r4, #20]
            return true;
   d48a0:	e776      	b.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d48a2:	2500      	movs	r5, #0
   d48a4:	e777      	b.n	d4796 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d48a6:	bf00      	nop
   d48a8:	000d7190 	.word	0x000d7190

000d48ac <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d48ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48b0:	4615      	mov	r5, r2
   d48b2:	b08c      	sub	sp, #48	; 0x30
   d48b4:	4604      	mov	r4, r0
   d48b6:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d48b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d48bc:	460f      	mov	r7, r1
   d48be:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d48c0:	f000 fb40 	bl	d4f44 <_Z10BlynkDelaym>
   d48c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48c6:	ae01      	add	r6, sp, #4
   d48c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48ca:	682b      	ldr	r3, [r5, #0]
   d48cc:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d48ce:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48d0:	f000 fb3a 	bl	d4f48 <_Z11BlynkMillisv>
   d48d4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48d8:	3808      	subs	r0, #8
   d48da:	af01      	add	r7, sp, #4
   d48dc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d48e0:	6160      	str	r0, [r4, #20]
   d48e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48e4:	ae07      	add	r6, sp, #28
   d48e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48e8:	683b      	ldr	r3, [r7, #0]
   d48ea:	7033      	strb	r3, [r6, #0]
   d48ec:	af07      	add	r7, sp, #28
   d48ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d48f0:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d48f2:	f04f 0c00 	mov.w	ip, #0
   d48f6:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d48fa:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d48fe:	3520      	adds	r5, #32
   d4900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4902:	6833      	ldr	r3, [r6, #0]
   d4904:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4906:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4908:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d490c:	6820      	ldr	r0, [r4, #0]
   d490e:	f001 fc75 	bl	d61fc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4912:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4914:	f000 fb18 	bl	d4f48 <_Z11BlynkMillisv>
   d4918:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d491a:	7f63      	ldrb	r3, [r4, #29]
   d491c:	2b01      	cmp	r3, #1
   d491e:	d00c      	beq.n	d493a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4920:	f000 fb12 	bl	d4f48 <_Z11BlynkMillisv>
   d4924:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4926:	42b8      	cmp	r0, r7
   d4928:	d804      	bhi.n	d4934 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d492a:	2100      	movs	r1, #0
   d492c:	4620      	mov	r0, r4
   d492e:	f7ff ff05 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4932:	e7f2      	b.n	d491a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4934:	7f63      	ldrb	r3, [r4, #29]
   d4936:	2b01      	cmp	r3, #1
   d4938:	d1e8      	bne.n	d490c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d493a:	b00c      	add	sp, #48	; 0x30
   d493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4940 <setup>:
LIS3DHSPI accel(SPI, D3, WKP); // there are two SPI busses, SPI and SP1. We should use SPI based on our schematic.
SYSTEM_THREAD(ENABLED);
// setup() runs once, when the device is first turned on.
unsigned long lastPrintSample = 0;
const unsigned long PRINT_SAMPLE_PERIOD = 100;
void setup() {
   d4940:	b500      	push	{lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3,INPUT);
   d4942:	2100      	movs	r1, #0
void setup() {
   d4944:	b08b      	sub	sp, #44	; 0x2c
  pinMode(D3,INPUT);
   d4946:	2003      	movs	r0, #3
   d4948:	f001 fe60 	bl	d660c <pinMode>
  Serial.begin(9600);
   d494c:	f001 f96c 	bl	d5c28 <_Z16_fetch_usbserialv>
   d4950:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4954:	f001 f95c 	bl	d5c10 <_ZN9USBSerial5beginEl>
  Blynk.begin("xEHyJ1ZygwI7OXGc9-eLg3KWMaR4x7l5", IPAddress(167, 172, 234, 162), 9090); 
   d4958:	23a2      	movs	r3, #162	; 0xa2
   d495a:	9300      	str	r3, [sp, #0]
   d495c:	22ac      	movs	r2, #172	; 0xac
   d495e:	23ea      	movs	r3, #234	; 0xea
   d4960:	21a7      	movs	r1, #167	; 0xa7
   d4962:	a804      	add	r0, sp, #16
   d4964:	f001 f8e8 	bl	d5b38 <_ZN9IPAddressC1Ehhhh>
   d4968:	f242 3382 	movw	r3, #9090	; 0x2382
   d496c:	aa04      	add	r2, sp, #16
   d496e:	490c      	ldr	r1, [pc, #48]	; (d49a0 <setup+0x60>)
   d4970:	480c      	ldr	r0, [pc, #48]	; (d49a4 <setup+0x64>)
   d4972:	f7ff ff9b 	bl	d48ac <_ZN13BlynkParticle5beginEPKc9IPAddresst>

  // Initialize sensors
	LIS3DHConfig config;
   d4976:	a804      	add	r0, sp, #16
   d4978:	f000 fa0c 	bl	d4d94 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   d497c:	2150      	movs	r1, #80	; 0x50
   d497e:	a804      	add	r0, sp, #16
   d4980:	f000 fa15 	bl	d4dae <_ZN12LIS3DHConfig12setAccelModeEh>

	bool setupSuccess = accel.setup(config);
   d4984:	a904      	add	r1, sp, #16
   d4986:	4808      	ldr	r0, [pc, #32]	; (d49a8 <setup+0x68>)
   d4988:	f000 fa80 	bl	d4e8c <_ZN6LIS3DH5setupER12LIS3DHConfig>
   d498c:	9003      	str	r0, [sp, #12]
	Serial.printlnf("setupSuccess=%d", setupSuccess);
   d498e:	f001 f94b 	bl	d5c28 <_Z16_fetch_usbserialv>
   d4992:	9a03      	ldr	r2, [sp, #12]
   d4994:	4905      	ldr	r1, [pc, #20]	; (d49ac <setup+0x6c>)
   d4996:	f7ff fc07 	bl	d41a8 <_ZN5Print8printlnfEPKcz>
}
   d499a:	b00b      	add	sp, #44	; 0x2c
   d499c:	f85d fb04 	ldr.w	pc, [sp], #4
   d49a0:	000d6c1c 	.word	0x000d6c1c
   d49a4:	2003e5c8 	.word	0x2003e5c8
   d49a8:	2003e624 	.word	0x2003e624
   d49ac:	000d6c3d 	.word	0x000d6c3d

000d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d49b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49b4:	b083      	sub	sp, #12
   d49b6:	af00      	add	r7, sp, #0
   d49b8:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d49ba:	6800      	ldr	r0, [r0, #0]
   d49bc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d49be:	4688      	mov	r8, r1
   d49c0:	4616      	mov	r6, r2
   d49c2:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d49c4:	46eb      	mov	fp, sp
   d49c6:	f001 fa38 	bl	d5e3a <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d49ca:	2800      	cmp	r0, #0
   d49cc:	d07f      	beq.n	d4ace <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d49ce:	f1b8 0f1d 	cmp.w	r8, #29
   d49d2:	d804      	bhi.n	d49de <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d49d4:	4b4c      	ldr	r3, [pc, #304]	; (d4b08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d49d6:	fa23 f308 	lsr.w	r3, r3, r8
   d49da:	07db      	lsls	r3, r3, #31
   d49dc:	d402      	bmi.n	d49e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d49de:	7f63      	ldrb	r3, [r4, #29]
   d49e0:	2b01      	cmp	r3, #1
   d49e2:	d174      	bne.n	d4ace <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d49e4:	b946      	cbnz	r6, d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49e6:	8b66      	ldrh	r6, [r4, #26]
   d49e8:	b936      	cbnz	r6, d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d49ea:	8b23      	ldrh	r3, [r4, #24]
   d49ec:	3301      	adds	r3, #1
   d49ee:	b29b      	uxth	r3, r3
   d49f0:	2b00      	cmp	r3, #0
   d49f2:	d071      	beq.n	d4ad8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d49f4:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49f6:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49f8:	f1a8 030c 	sub.w	r3, r8, #12
   d49fc:	2b08      	cmp	r3, #8
   d49fe:	d816      	bhi.n	d4a2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a00:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4a04:	4293      	cmp	r3, r2
   d4a06:	bf38      	it	cc
   d4a08:	4613      	movcc	r3, r2
   d4a0a:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a0e:	f000 fa9b 	bl	d4f48 <_Z11BlynkMillisv>
   d4a12:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4a16:	2800      	cmp	r0, #0
   d4a18:	db60      	blt.n	d4adc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a1a:	2100      	movs	r1, #0
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f7ff fe8d 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a22:	f000 fa91 	bl	d4f48 <_Z11BlynkMillisv>
   d4a26:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a2a:	2800      	cmp	r0, #0
   d4a2c:	daf5      	bge.n	d4a1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a2e:	f1b9 0f00 	cmp.w	r9, #0
   d4a32:	d05a      	beq.n	d4aea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a34:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a38:	2a00      	cmp	r2, #0
   d4a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a3c:	bf08      	it	eq
   d4a3e:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a40:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a44:	f10a 0307 	add.w	r3, sl, #7
   d4a48:	f023 0307 	bic.w	r3, r3, #7
   d4a4c:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a52:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a56:	18ea      	adds	r2, r5, r3
   d4a58:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a5c:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a62:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a66:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a6a:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4a6e:	f1b9 0f00 	cmp.w	r9, #0
   d4a72:	d03c      	beq.n	d4aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4a74:	2d00      	cmp	r5, #0
   d4a76:	d03a      	beq.n	d4aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4a78:	462a      	mov	r2, r5
   d4a7a:	4649      	mov	r1, r9
   d4a7c:	f10d 0005 	add.w	r0, sp, #5
   d4a80:	f001 ffb0 	bl	d69e4 <memcpy>
        pos += length;
   d4a84:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a88:	b13b      	cbz	r3, d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a8c:	b12b      	cbz	r3, d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a8e:	461a      	mov	r2, r3
   d4a90:	687b      	ldr	r3, [r7, #4]
   d4a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a94:	4418      	add	r0, r3
   d4a96:	f001 ffa5 	bl	d69e4 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a9a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a9c:	4555      	cmp	r5, sl
   d4a9e:	d22a      	bcs.n	d4af6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4aa0:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4aa4:	687b      	ldr	r3, [r7, #4]
   d4aa6:	6820      	ldr	r0, [r4, #0]
   d4aa8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4aac:	bf28      	it	cs
   d4aae:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4ab2:	1959      	adds	r1, r3, r5
   d4ab4:	f001 f9ab 	bl	d5e0e <_ZN9TCPClient5writeEPKhj>
   d4ab8:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4aba:	2000      	movs	r0, #0
   d4abc:	f000 fa42 	bl	d4f44 <_Z10BlynkDelaym>
        if (w == 0) {
   d4ac0:	b9be      	cbnz	r6, d4af2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4ac2:	6820      	ldr	r0, [r4, #0]
   d4ac4:	f001 fb9a 	bl	d61fc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4ac8:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4aca:	f000 fa41 	bl	d4f50 <BlynkNoOpCbk>
}
   d4ace:	370c      	adds	r7, #12
   d4ad0:	46dd      	mov	sp, fp
   d4ad2:	46bd      	mov	sp, r7
   d4ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4ad8:	2301      	movs	r3, #1
   d4ada:	e78b      	b.n	d49f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4adc:	7f21      	ldrb	r1, [r4, #28]
   d4ade:	2900      	cmp	r1, #0
   d4ae0:	d1a5      	bne.n	d4a2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff fe2a 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ae8:	e7a1      	b.n	d4a2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aea:	2305      	movs	r3, #5
   d4aec:	e7a3      	b.n	d4a36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4aee:	2005      	movs	r0, #5
   d4af0:	e7c9      	b.n	d4a86 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4af2:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4af4:	e7d2      	b.n	d4a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4af6:	d003      	beq.n	d4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4af8:	4620      	mov	r0, r4
   d4afa:	f7ff fbad 	bl	d4258 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4afe:	e7e6      	b.n	d4ace <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b00:	f000 fa22 	bl	d4f48 <_Z11BlynkMillisv>
   d4b04:	6120      	str	r0, [r4, #16]
   d4b06:	e7e2      	b.n	d4ace <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4b08:	20000045 	.word	0x20000045

000d4b0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4b0c:	b500      	push	{lr}
   d4b0e:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4b10:	ab04      	add	r3, sp, #16
   d4b12:	2200      	movs	r2, #0
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	2349      	movs	r3, #73	; 0x49
   d4b18:	9300      	str	r3, [sp, #0]
   d4b1a:	9202      	str	r2, [sp, #8]
   d4b1c:	4b03      	ldr	r3, [pc, #12]	; (d4b2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b1e:	2111      	movs	r1, #17
   d4b20:	f7ff ff46 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b24:	b015      	add	sp, #84	; 0x54
   d4b26:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b2a:	bf00      	nop
   d4b2c:	000d6c80 	.word	0x000d6c80

000d4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b32:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b36:	ab08      	add	r3, sp, #32
   d4b38:	2400      	movs	r4, #0
   d4b3a:	4605      	mov	r5, r0
   d4b3c:	460f      	mov	r7, r1
   d4b3e:	9305      	str	r3, [sp, #20]
   d4b40:	a805      	add	r0, sp, #20
   d4b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b46:	490e      	ldr	r1, [pc, #56]	; (d4b80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_+0x50>)
   d4b48:	4616      	mov	r6, r2
   d4b4a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b4e:	f7ff fac1 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4b52:	4639      	mov	r1, r7
   d4b54:	a805      	add	r0, sp, #20
   d4b56:	f7ff fb5b 	bl	d4210 <_ZN10BlynkParam3addEi>
        add(last);
   d4b5a:	4631      	mov	r1, r6
   d4b5c:	a805      	add	r0, sp, #20
   d4b5e:	f7ff fb57 	bl	d4210 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b62:	9b06      	ldr	r3, [sp, #24]
   d4b64:	3b01      	subs	r3, #1
   d4b66:	9300      	str	r3, [sp, #0]
   d4b68:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b6c:	9b05      	ldr	r3, [sp, #20]
   d4b6e:	4622      	mov	r2, r4
   d4b70:	2114      	movs	r1, #20
   d4b72:	4628      	mov	r0, r5
   d4b74:	f7ff ff1c 	bl	d49b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b78:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b7e:	bf00      	nop
   d4b80:	000d6c4d 	.word	0x000d6c4d

000d4b84 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // The core of your code will likely live here.
  Blynk.run();
   d4b86:	2100      	movs	r1, #0
   d4b88:	481b      	ldr	r0, [pc, #108]	; (d4bf8 <loop+0x74>)
  LIS3DHSample sample;
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4b8a:	4c1c      	ldr	r4, [pc, #112]	; (d4bfc <loop+0x78>)
  Blynk.run();
   d4b8c:	f7ff fdd6 	bl	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b90:	f000 fa5c 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4b94:	6823      	ldr	r3, [r4, #0]
   d4b96:	1ac0      	subs	r0, r0, r3
   d4b98:	2863      	cmp	r0, #99	; 0x63
   d4b9a:	d913      	bls.n	d4bc4 <loop+0x40>
   d4b9c:	f000 fa56 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		
		if (accel.getSample(sample)) {
   d4ba0:	a902      	add	r1, sp, #8
		lastPrintSample = millis();
   d4ba2:	6020      	str	r0, [r4, #0]
		if (accel.getSample(sample)) {
   d4ba4:	4816      	ldr	r0, [pc, #88]	; (d4c00 <loop+0x7c>)
   d4ba6:	f000 f93b 	bl	d4e20 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4baa:	b1f8      	cbz	r0, d4bec <loop+0x68>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
   d4bac:	f001 f83c 	bl	d5c28 <_Z16_fetch_usbserialv>
   d4bb0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   d4bb4:	9300      	str	r3, [sp, #0]
   d4bb6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   d4bba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   d4bbe:	4911      	ldr	r1, [pc, #68]	; (d4c04 <loop+0x80>)
   d4bc0:	f7ff faf2 	bl	d41a8 <_ZN5Print8printlnfEPKcz>
		else {
			Serial.println("no sample");
		}
	}
  
    Blynk.virtualWrite(V1,sample.x);
   d4bc4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   d4bc8:	480b      	ldr	r0, [pc, #44]	; (d4bf8 <loop+0x74>)
   d4bca:	2101      	movs	r1, #1
   d4bcc:	f7ff ffb0 	bl	d4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
    Blynk.virtualWrite(V2,sample.y);
   d4bd0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   d4bd4:	4808      	ldr	r0, [pc, #32]	; (d4bf8 <loop+0x74>)
   d4bd6:	2102      	movs	r1, #2
   d4bd8:	f7ff ffaa 	bl	d4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
    Blynk.virtualWrite(V3,sample.z);
   d4bdc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
   d4be0:	4805      	ldr	r0, [pc, #20]	; (d4bf8 <loop+0x74>)
   d4be2:	2103      	movs	r1, #3
   d4be4:	f7ff ffa4 	bl	d4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
    

}
   d4be8:	b004      	add	sp, #16
   d4bea:	bd10      	pop	{r4, pc}
			Serial.println("no sample");
   d4bec:	f001 f81c 	bl	d5c28 <_Z16_fetch_usbserialv>
   d4bf0:	4905      	ldr	r1, [pc, #20]	; (d4c08 <loop+0x84>)
   d4bf2:	f000 fde2 	bl	d57ba <_ZN5Print7printlnEPKc>
   d4bf6:	e7e5      	b.n	d4bc4 <loop+0x40>
   d4bf8:	2003e5c8 	.word	0x2003e5c8
   d4bfc:	2003e64c 	.word	0x2003e64c
   d4c00:	2003e624 	.word	0x2003e624
   d4c04:	000d6c50 	.word	0x000d6c50
   d4c08:	000d6c59 	.word	0x000d6c59

000d4c0c <_GLOBAL__sub_I_Blynk>:
}
   d4c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d4c0e:	4d26      	ldr	r5, [pc, #152]	; (d4ca8 <_GLOBAL__sub_I_Blynk+0x9c>)
   d4c10:	4628      	mov	r0, r5
   d4c12:	2400      	movs	r4, #0
   d4c14:	f001 fb3c 	bl	d6290 <_ZN9TCPClientC1Ev>
   d4c18:	f105 001c 	add.w	r0, r5, #28
   d4c1c:	f000 ff48 	bl	d5ab0 <_ZN9IPAddressC1Ev>
   d4c20:	636c      	str	r4, [r5, #52]	; 0x34
   d4c22:	872c      	strh	r4, [r5, #56]	; 0x38
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4c24:	4a21      	ldr	r2, [pc, #132]	; (d4cac <_GLOBAL__sub_I_Blynk+0xa0>)
   d4c26:	4922      	ldr	r1, [pc, #136]	; (d4cb0 <_GLOBAL__sub_I_Blynk+0xa4>)
   d4c28:	4628      	mov	r0, r5
   d4c2a:	f001 fda9 	bl	d6780 <__aeabi_atexit>
        , state(CONNECTING)
   d4c2e:	4b21      	ldr	r3, [pc, #132]	; (d4cb4 <_GLOBAL__sub_I_Blynk+0xa8>)
   d4c30:	e9c3 5400 	strd	r5, r4, [r3]
   d4c34:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4c38:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4c3c:	619c      	str	r4, [r3, #24]
   d4c3e:	839c      	strh	r4, [r3, #28]

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d4c40:	4c1d      	ldr	r4, [pc, #116]	; (d4cb8 <_GLOBAL__sub_I_Blynk+0xac>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4c42:	4d1e      	ldr	r5, [pc, #120]	; (d4cbc <_GLOBAL__sub_I_Blynk+0xb0>)
   d4c44:	2108      	movs	r1, #8
   d4c46:	4620      	mov	r0, r4
   d4c48:	f000 f8bc 	bl	d4dc4 <_ZN6LIS3DHC1Ei>
   d4c4c:	4b1c      	ldr	r3, [pc, #112]	; (d4cc0 <_GLOBAL__sub_I_Blynk+0xb4>)
   d4c4e:	6023      	str	r3, [r4, #0]
   d4c50:	7829      	ldrb	r1, [r5, #0]
   d4c52:	f3bf 8f5b 	dmb	ish
   d4c56:	f011 0101 	ands.w	r1, r1, #1
   d4c5a:	d10b      	bne.n	d4c74 <_GLOBAL__sub_I_Blynk+0x68>
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	9101      	str	r1, [sp, #4]
   d4c60:	f7ff fa28 	bl	d40b4 <__cxa_guard_acquire>
   d4c64:	9901      	ldr	r1, [sp, #4]
   d4c66:	b128      	cbz	r0, d4c74 <_GLOBAL__sub_I_Blynk+0x68>
   d4c68:	4816      	ldr	r0, [pc, #88]	; (d4cc4 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4c6a:	f000 fc5f 	bl	d552c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c6e:	4628      	mov	r0, r5
   d4c70:	f7ff fa25 	bl	d40be <__cxa_guard_release>
   d4c74:	4b13      	ldr	r3, [pc, #76]	; (d4cc4 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4c76:	60e3      	str	r3, [r4, #12]
   d4c78:	2303      	movs	r3, #3
   d4c7a:	6123      	str	r3, [r4, #16]
      dataMode_{dataMode}
   d4c7c:	4b12      	ldr	r3, [pc, #72]	; (d4cc8 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4c7e:	61a3      	str	r3, [r4, #24]
   d4c80:	2500      	movs	r5, #0
   d4c82:	4b12      	ldr	r3, [pc, #72]	; (d4ccc <_GLOBAL__sub_I_Blynk+0xc0>)
LIS3DHSPI accel(SPI, D3, WKP); // there are two SPI busses, SPI and SP1. We should use SPI based on our schematic.
   d4c84:	4a09      	ldr	r2, [pc, #36]	; (d4cac <_GLOBAL__sub_I_Blynk+0xa0>)
   d4c86:	4912      	ldr	r1, [pc, #72]	; (d4cd0 <_GLOBAL__sub_I_Blynk+0xc4>)
   d4c88:	7525      	strb	r5, [r4, #20]
   d4c8a:	2601      	movs	r6, #1
   d4c8c:	7725      	strb	r5, [r4, #28]
   d4c8e:	6223      	str	r3, [r4, #32]
   d4c90:	84a6      	strh	r6, [r4, #36]	; 0x24
   d4c92:	4809      	ldr	r0, [pc, #36]	; (d4cb8 <_GLOBAL__sub_I_Blynk+0xac>)
   d4c94:	f001 fd74 	bl	d6780 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4c98:	4629      	mov	r1, r5
   d4c9a:	4630      	mov	r0, r6
}
   d4c9c:	b002      	add	sp, #8
   d4c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   d4ca2:	f000 bb43 	b.w	d532c <system_thread_set_state>
   d4ca6:	bf00      	nop
   d4ca8:	2003e5e8 	.word	0x2003e5e8
   d4cac:	2003e5b8 	.word	0x2003e5b8
   d4cb0:	000d4105 	.word	0x000d4105
   d4cb4:	2003e5c8 	.word	0x2003e5c8
   d4cb8:	2003e624 	.word	0x2003e624
   d4cbc:	2003e5bc 	.word	0x2003e5bc
   d4cc0:	000d6d00 	.word	0x000d6d00
   d4cc4:	2003e5c0 	.word	0x2003e5c0
   d4cc8:	000d6c6c 	.word	0x000d6c6c
   d4ccc:	00989680 	.word	0x00989680
   d4cd0:	000d4cd5 	.word	0x000d4cd5

000d4cd4 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d4cd4:	4770      	bx	lr

000d4cd6 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d4cd6:	b510      	push	{r4, lr}
}
   d4cd8:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d4cda:	4604      	mov	r4, r0
}
   d4cdc:	f001 fd55 	bl	d678a <_ZdlPvj>
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	bd10      	pop	{r4, pc}

000d4ce4 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d4ce4:	b510      	push	{r4, lr}
   d4ce6:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d4ce8:	f100 0118 	add.w	r1, r0, #24
   d4cec:	68c0      	ldr	r0, [r0, #12]
   d4cee:	f000 fc53 	bl	d5598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d4cf2:	8a20      	ldrh	r0, [r4, #16]
   d4cf4:	2100      	movs	r1, #0
}
   d4cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d4cfa:	f001 bc98 	b.w	d662e <digitalWrite>

000d4cfe <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d4cfe:	b510      	push	{r4, lr}
   d4d00:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d4d02:	2101      	movs	r1, #1
   d4d04:	8a00      	ldrh	r0, [r0, #16]
   d4d06:	f001 fc92 	bl	d662e <digitalWrite>

	spi.endTransaction();
   d4d0a:	68e0      	ldr	r0, [r4, #12]
}
   d4d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d4d10:	f000 bc29 	b.w	d5566 <_ZN8SPIClass14endTransactionEv>

000d4d14 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d16:	461e      	mov	r6, r3
	beginTransaction();
   d4d18:	6803      	ldr	r3, [r0, #0]
   d4d1a:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4d1c:	460f      	mov	r7, r1
   d4d1e:	4614      	mov	r4, r2
   d4d20:	4605      	mov	r5, r0
	beginTransaction();
   d4d22:	4798      	blx	r3

	if (numBytes > 1) {
   d4d24:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d4d26:	bf88      	it	hi
   d4d28:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d4d2c:	68e8      	ldr	r0, [r5, #12]
   d4d2e:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d4d32:	f000 fc9f 	bl	d5674 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d36:	4426      	add	r6, r4
   d4d38:	42b4      	cmp	r4, r6
   d4d3a:	d006      	beq.n	d4d4a <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d4d3c:	68e8      	ldr	r0, [r5, #12]
   d4d3e:	2100      	movs	r1, #0
   d4d40:	f000 fc98 	bl	d5674 <_ZN8SPIClass8transferEh>
   d4d44:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d48:	e7f6      	b.n	d4d38 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d4d4a:	682b      	ldr	r3, [r5, #0]
   d4d4c:	4628      	mov	r0, r5
   d4d4e:	699b      	ldr	r3, [r3, #24]
   d4d50:	4798      	blx	r3

	return true;
}
   d4d52:	2001      	movs	r0, #1
   d4d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d56 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d4d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d58:	461e      	mov	r6, r3
	beginTransaction();
   d4d5a:	6803      	ldr	r3, [r0, #0]
   d4d5c:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d4d5e:	460f      	mov	r7, r1
   d4d60:	4614      	mov	r4, r2
   d4d62:	4605      	mov	r5, r0
	beginTransaction();
   d4d64:	4798      	blx	r3

	if (numBytes > 1) {
   d4d66:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d4d68:	bf88      	it	hi
   d4d6a:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d4d6e:	68e8      	ldr	r0, [r5, #12]
   d4d70:	4639      	mov	r1, r7
   d4d72:	f000 fc7f 	bl	d5674 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d76:	4426      	add	r6, r4
   d4d78:	42b4      	cmp	r4, r6
   d4d7a:	d005      	beq.n	d4d88 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d4d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d80:	68e8      	ldr	r0, [r5, #12]
   d4d82:	f000 fc77 	bl	d5674 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d4d86:	e7f7      	b.n	d4d78 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d4d88:	682b      	ldr	r3, [r5, #0]
   d4d8a:	4628      	mov	r0, r5
   d4d8c:	699b      	ldr	r3, [r3, #24]
   d4d8e:	4798      	blx	r3

	return true;
}
   d4d90:	2001      	movs	r0, #1
   d4d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d94 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d4d94:	2200      	movs	r2, #0
   d4d96:	7002      	strb	r2, [r0, #0]
   d4d98:	7042      	strb	r2, [r0, #1]
   d4d9a:	7082      	strb	r2, [r0, #2]
   d4d9c:	70c2      	strb	r2, [r0, #3]
   d4d9e:	7102      	strb	r2, [r0, #4]
   d4da0:	7142      	strb	r2, [r0, #5]
   d4da2:	7182      	strb	r2, [r0, #6]
   d4da4:	71c2      	strb	r2, [r0, #7]
   d4da6:	7202      	strb	r2, [r0, #8]
   d4da8:	7242      	strb	r2, [r0, #9]
   d4daa:	7282      	strb	r2, [r0, #10]
}
   d4dac:	4770      	bx	lr

000d4dae <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   d4dae:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d4db0:	f041 0107 	orr.w	r1, r1, #7
   d4db4:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   d4db6:	7102      	strb	r2, [r0, #4]
   d4db8:	7082      	strb	r2, [r0, #2]
   d4dba:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   d4dbc:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   d4dbe:	7242      	strb	r2, [r0, #9]
}
   d4dc0:	4770      	bx	lr
	...

000d4dc4 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d4dc4:	4a02      	ldr	r2, [pc, #8]	; (d4dd0 <_ZN6LIS3DHC1Ei+0xc>)
   d4dc6:	e9c0 2100 	strd	r2, r1, [r0]
   d4dca:	2200      	movs	r2, #0
   d4dcc:	7202      	strb	r2, [r0, #8]
}
   d4dce:	4770      	bx	lr
   d4dd0:	000d6ce4 	.word	0x000d6ce4

000d4dd4 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d4dd4:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d4dd6:	6803      	ldr	r3, [r0, #0]
   d4dd8:	aa01      	add	r2, sp, #4
   d4dda:	68dc      	ldr	r4, [r3, #12]
   d4ddc:	2301      	movs	r3, #1
   d4dde:	47a0      	blx	r4
}
   d4de0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4de4:	b002      	add	sp, #8
   d4de6:	bd10      	pop	{r4, pc}

000d4de8 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d4de8:	b538      	push	{r3, r4, r5, lr}
   d4dea:	4605      	mov	r5, r0
   d4dec:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d4dee:	210f      	movs	r1, #15
   d4df0:	4628      	mov	r0, r5
   d4df2:	f7ff ffef 	bl	d4dd4 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d4df6:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d4df8:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d4dfc:	d004      	beq.n	d4e08 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d4dfe:	f000 fd73 	bl	d58e8 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d4e02:	3c01      	subs	r4, #1
   d4e04:	d1f3      	bne.n	d4dee <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d4e06:	4620      	mov	r0, r4
}
   d4e08:	bd38      	pop	{r3, r4, r5, pc}

000d4e0a <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d4e0a:	b510      	push	{r4, lr}
   d4e0c:	4604      	mov	r4, r0
	spi.begin(ss);
   d4e0e:	8a01      	ldrh	r1, [r0, #16]
   d4e10:	68c0      	ldr	r0, [r0, #12]
   d4e12:	f000 fb95 	bl	d5540 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d4e16:	4620      	mov	r0, r4
}
   d4e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d4e1c:	f7ff bfe4 	b.w	d4de8 <_ZN6LIS3DH9hasDeviceEv>

000d4e20 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d4e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4e22:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d4e24:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d4e26:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d4e28:	f7ff ffd4 	bl	d4dd4 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d4e2c:	f000 0008 	and.w	r0, r0, #8
   d4e30:	2800      	cmp	r0, #0
   d4e32:	bf14      	ite	ne
   d4e34:	2601      	movne	r6, #1
   d4e36:	2600      	moveq	r6, #0
	if (hasData) {
   d4e38:	d01b      	beq.n	d4e72 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d4e3a:	682b      	ldr	r3, [r5, #0]
   d4e3c:	466a      	mov	r2, sp
   d4e3e:	68df      	ldr	r7, [r3, #12]
   d4e40:	2128      	movs	r1, #40	; 0x28
   d4e42:	2306      	movs	r3, #6
   d4e44:	4628      	mov	r0, r5
   d4e46:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d4e48:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d4e4c:	f89d 3000 	ldrb.w	r3, [sp]
   d4e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e54:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d4e56:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d4e5a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d4e5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e62:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d4e64:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d4e68:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e70:	80a3      	strh	r3, [r4, #4]
}
   d4e72:	4630      	mov	r0, r6
   d4e74:	b003      	add	sp, #12
   d4e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e78 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d4e78:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d4e7a:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d4e7c:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d4e80:	691c      	ldr	r4, [r3, #16]
   d4e82:	aa01      	add	r2, sp, #4
   d4e84:	2301      	movs	r3, #1
   d4e86:	47a0      	blx	r4
}
   d4e88:	b002      	add	sp, #8
   d4e8a:	bd10      	pop	{r4, pc}

000d4e8c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d4e8c:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d4e8e:	6803      	ldr	r3, [r0, #0]
   d4e90:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d4e92:	4604      	mov	r4, r0
   d4e94:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d4e96:	4798      	blx	r3
   d4e98:	4606      	mov	r6, r0
   d4e9a:	b930      	cbnz	r0, d4eaa <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d4e9c:	f000 fec4 	bl	d5c28 <_Z16_fetch_usbserialv>
   d4ea0:	4927      	ldr	r1, [pc, #156]	; (d4f40 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d4ea2:	f000 fc8a 	bl	d57ba <_ZN5Print7printlnEPKc>
}
   d4ea6:	4630      	mov	r0, r6
   d4ea8:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d4eaa:	782a      	ldrb	r2, [r5, #0]
   d4eac:	2120      	movs	r1, #32
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f7ff ffe2 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d4eb4:	786a      	ldrb	r2, [r5, #1]
   d4eb6:	2121      	movs	r1, #33	; 0x21
   d4eb8:	4620      	mov	r0, r4
   d4eba:	f7ff ffdd 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d4ebe:	78aa      	ldrb	r2, [r5, #2]
   d4ec0:	2122      	movs	r1, #34	; 0x22
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	f7ff ffd8 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d4ec8:	78ea      	ldrb	r2, [r5, #3]
   d4eca:	2123      	movs	r1, #35	; 0x23
   d4ecc:	4620      	mov	r0, r4
   d4ece:	f7ff ffd3 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d4ed2:	792a      	ldrb	r2, [r5, #4]
   d4ed4:	2124      	movs	r1, #36	; 0x24
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	f7ff ffce 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d4edc:	796a      	ldrb	r2, [r5, #5]
   d4ede:	2125      	movs	r1, #37	; 0x25
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	f7ff ffc9 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d4ee6:	79ab      	ldrb	r3, [r5, #6]
   d4ee8:	b11b      	cbz	r3, d4ef2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d4eea:	2126      	movs	r1, #38	; 0x26
   d4eec:	4620      	mov	r0, r4
   d4eee:	f7ff ff71 	bl	d4dd4 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d4ef2:	7aaa      	ldrb	r2, [r5, #10]
   d4ef4:	212e      	movs	r1, #46	; 0x2e
   d4ef6:	4620      	mov	r0, r4
   d4ef8:	f7ff ffbe 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d4efc:	78ab      	ldrb	r3, [r5, #2]
   d4efe:	065b      	lsls	r3, r3, #25
   d4f00:	d5d1      	bpl.n	d4ea6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d4f02:	79ea      	ldrb	r2, [r5, #7]
   d4f04:	2132      	movs	r1, #50	; 0x32
   d4f06:	4620      	mov	r0, r4
   d4f08:	f7ff ffb6 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d4f0c:	7a2a      	ldrb	r2, [r5, #8]
   d4f0e:	2133      	movs	r1, #51	; 0x33
   d4f10:	4620      	mov	r0, r4
   d4f12:	f7ff ffb1 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d4f16:	6863      	ldr	r3, [r4, #4]
   d4f18:	2b00      	cmp	r3, #0
   d4f1a:	db0a      	blt.n	d4f32 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d4f1c:	7a6a      	ldrb	r2, [r5, #9]
   d4f1e:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d4f20:	4620      	mov	r0, r4
   d4f22:	2130      	movs	r1, #48	; 0x30
   d4f24:	f7ff ffa8 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d4f28:	2131      	movs	r1, #49	; 0x31
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	f7ff ff52 	bl	d4dd4 <_ZN6LIS3DH13readRegister8Eh>
   d4f30:	e7b9      	b.n	d4ea6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d4f32:	2200      	movs	r2, #0
   d4f34:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d4f36:	2130      	movs	r1, #48	; 0x30
   d4f38:	4620      	mov	r0, r4
   d4f3a:	f7ff ff9d 	bl	d4e78 <_ZN6LIS3DH14writeRegister8Ehh>
   d4f3e:	e7b2      	b.n	d4ea6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d4f40:	000d6ccb 	.word	0x000d6ccb

000d4f44 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d4f44:	f000 bcd0 	b.w	d58e8 <delay>

000d4f48 <_Z11BlynkMillisv>:
   d4f48:	f000 b880 	b.w	d504c <HAL_Timer_Get_Milli_Seconds>

000d4f4c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d4f4c:	4770      	bx	lr

000d4f4e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d4f4e:	4770      	bx	lr

000d4f50 <BlynkNoOpCbk>:
{}
   d4f50:	4770      	bx	lr
	...

000d4f54 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d4f54:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d4f56:	bf5a      	itte	pl
   d4f58:	4b02      	ldrpl	r3, [pc, #8]	; (d4f64 <GetReadHandler+0x10>)
   d4f5a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4f5e:	2000      	movmi	r0, #0
#endif
}
   d4f60:	4770      	bx	lr
   d4f62:	bf00      	nop
   d4f64:	000d6d1c 	.word	0x000d6d1c

000d4f68 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d4f68:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d4f6a:	bf5a      	itte	pl
   d4f6c:	4b02      	ldrpl	r3, [pc, #8]	; (d4f78 <GetWriteHandler+0x10>)
   d4f6e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d4f72:	2000      	movmi	r0, #0
#endif
}
   d4f74:	4770      	bx	lr
   d4f76:	bf00      	nop
   d4f78:	000d6f1c 	.word	0x000d6f1c

000d4f7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <netdb_freeaddrinfo+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	689b      	ldr	r3, [r3, #8]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030268 	.word	0x00030268

000d4f8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <netdb_getaddrinfo+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	68db      	ldr	r3, [r3, #12]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030268 	.word	0x00030268

000d4f9c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <HAL_Validate_Pin_Function+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	685b      	ldr	r3, [r3, #4]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	0003022c 	.word	0x0003022c

000d4fac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_Pin_Mode+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	689b      	ldr	r3, [r3, #8]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	0003022c 	.word	0x0003022c

000d4fbc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <HAL_Get_Pin_Mode+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	68db      	ldr	r3, [r3, #12]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	0003022c 	.word	0x0003022c

000d4fcc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <HAL_GPIO_Write+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	691b      	ldr	r3, [r3, #16]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003022c 	.word	0x0003022c

000d4fdc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <HAL_GPIO_Read+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	695b      	ldr	r3, [r3, #20]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	0003022c 	.word	0x0003022c

000d4fec <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_DAC_Write+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	0003022c 	.word	0x0003022c

000d4ffc <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <hal_adc_read+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	0003022c 	.word	0x0003022c

000d500c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <hal_pwm_write_ext+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003022c 	.word	0x0003022c

000d501c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <if_index_to_name+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	695b      	ldr	r3, [r3, #20]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003026c 	.word	0x0003026c

000d502c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <HAL_RNG_GetRandomNumber+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	685b      	ldr	r3, [r3, #4]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030218 	.word	0x00030218

000d503c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_Delay_Microseconds+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	68db      	ldr	r3, [r3, #12]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030218 	.word	0x00030218

000d504c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	695b      	ldr	r3, [r3, #20]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030218 	.word	0x00030218

000d505c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <os_mutex_recursive_create+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030248 	.word	0x00030248

000d506c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <os_mutex_recursive_destroy+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030248 	.word	0x00030248

000d507c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <inet_inet_ntop+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	695b      	ldr	r3, [r3, #20]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030264 	.word	0x00030264

000d508c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <inet_htonl+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6a1b      	ldr	r3, [r3, #32]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030264 	.word	0x00030264

000d509c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <inet_htons+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030264 	.word	0x00030264

000d50ac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <hal_usart_init+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	681b      	ldr	r3, [r3, #0]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003023c 	.word	0x0003023c

000d50bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <hal_usart_write+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	68db      	ldr	r3, [r3, #12]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003023c 	.word	0x0003023c

000d50cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <hal_usart_available+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	691b      	ldr	r3, [r3, #16]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003023c 	.word	0x0003023c

000d50dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <hal_usart_read+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	695b      	ldr	r3, [r3, #20]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003023c 	.word	0x0003023c

000d50ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <hal_usart_peek+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	699b      	ldr	r3, [r3, #24]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003023c 	.word	0x0003023c

000d50fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <hal_usart_flush+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	69db      	ldr	r3, [r3, #28]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	0003023c 	.word	0x0003023c

000d510c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <hal_usart_is_enabled+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6a1b      	ldr	r3, [r3, #32]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	0003023c 	.word	0x0003023c

000d511c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <hal_usart_available_data_for_write+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003023c 	.word	0x0003023c

000d512c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <hal_i2c_write+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	6a1b      	ldr	r3, [r3, #32]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030228 	.word	0x00030228

000d513c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <hal_i2c_available+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030228 	.word	0x00030228

000d514c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <hal_i2c_read+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030228 	.word	0x00030228

000d515c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <hal_i2c_peek+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030228 	.word	0x00030228

000d516c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <hal_i2c_flush+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030228 	.word	0x00030228

000d517c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <hal_i2c_is_enabled+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030228 	.word	0x00030228

000d518c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <hal_i2c_init+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030228 	.word	0x00030228

000d519c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <sock_setsockopt+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	699b      	ldr	r3, [r3, #24]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030238 	.word	0x00030238

000d51ac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <sock_close+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	69db      	ldr	r3, [r3, #28]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030238 	.word	0x00030238

000d51bc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <sock_connect+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6a1b      	ldr	r3, [r3, #32]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030238 	.word	0x00030238

000d51cc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <sock_recv+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030238 	.word	0x00030238

000d51dc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <sock_send+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030238 	.word	0x00030238

000d51ec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <sock_socket+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030238 	.word	0x00030238

000d51fc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <hal_spi_begin+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	681b      	ldr	r3, [r3, #0]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030230 	.word	0x00030230

000d520c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <hal_spi_transfer+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	695b      	ldr	r3, [r3, #20]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030230 	.word	0x00030230

000d521c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <hal_spi_init+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	69db      	ldr	r3, [r3, #28]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030230 	.word	0x00030230

000d522c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <hal_spi_is_enabled+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6a1b      	ldr	r3, [r3, #32]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030230 	.word	0x00030230

000d523c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <hal_spi_info+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030230 	.word	0x00030230

000d524c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <hal_spi_set_settings+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030230 	.word	0x00030230

000d525c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <hal_spi_acquire+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030230 	.word	0x00030230

000d526c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <hal_spi_release+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030230 	.word	0x00030230

000d527c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <HAL_USB_USART_Init+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	681b      	ldr	r3, [r3, #0]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	0003024c 	.word	0x0003024c

000d528c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <HAL_USB_USART_Begin+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	685b      	ldr	r3, [r3, #4]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	0003024c 	.word	0x0003024c

000d529c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <HAL_USB_USART_Available_Data+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	691b      	ldr	r3, [r3, #16]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003024c 	.word	0x0003024c

000d52ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	695b      	ldr	r3, [r3, #20]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003024c 	.word	0x0003024c

000d52bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_USB_USART_Receive_Data+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	699b      	ldr	r3, [r3, #24]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003024c 	.word	0x0003024c

000d52cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_USB_USART_Send_Data+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	69db      	ldr	r3, [r3, #28]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	0003024c 	.word	0x0003024c

000d52dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_USB_USART_Flush_Data+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6a1b      	ldr	r3, [r3, #32]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003024c 	.word	0x0003024c

000d52ec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <panic_+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	00030260 	.word	0x00030260

000d52fc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <log_message+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	00030260 	.word	0x00030260

000d530c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <set_system_mode+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	685b      	ldr	r3, [r3, #4]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030220 	.word	0x00030220

000d531c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <system_delay_ms+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	695b      	ldr	r3, [r3, #20]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030220 	.word	0x00030220

000d532c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <system_thread_set_state+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030220 	.word	0x00030220

000d533c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b03      	ldr	r3, [pc, #12]	; (d534c <system_ctrl_set_app_request_handler+0x10>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5346:	9301      	str	r3, [sp, #4]
   d5348:	bd08      	pop	{r3, pc}
   d534a:	0000      	.short	0x0000
   d534c:	00030220 	.word	0x00030220

000d5350 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b03      	ldr	r3, [pc, #12]	; (d5360 <system_ctrl_set_result+0x10>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d535a:	9301      	str	r3, [sp, #4]
   d535c:	bd08      	pop	{r3, pc}
   d535e:	0000      	.short	0x0000
   d5360:	00030220 	.word	0x00030220

000d5364 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <network_connect+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	685b      	ldr	r3, [r3, #4]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030240 	.word	0x00030240

000d5374 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <network_connecting+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	689b      	ldr	r3, [r3, #8]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030240 	.word	0x00030240

000d5384 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <network_disconnect+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	68db      	ldr	r3, [r3, #12]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030240 	.word	0x00030240

000d5394 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <network_ready+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	691b      	ldr	r3, [r3, #16]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030240 	.word	0x00030240

000d53a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <network_on+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	695b      	ldr	r3, [r3, #20]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030240 	.word	0x00030240

000d53b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <network_off+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	699b      	ldr	r3, [r3, #24]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030240 	.word	0x00030240

000d53c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <network_listen+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	69db      	ldr	r3, [r3, #28]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030240 	.word	0x00030240

000d53d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <network_listening+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	6a1b      	ldr	r3, [r3, #32]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	00030240 	.word	0x00030240

000d53e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <network_set_listen_timeout+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	00030240 	.word	0x00030240

000d53f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <network_get_listen_timeout+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030240 	.word	0x00030240

000d5404 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <network_is_on+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030240 	.word	0x00030240

000d5414 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <network_is_off+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030240 	.word	0x00030240

000d5424 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <spark_process+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	689b      	ldr	r3, [r3, #8]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030244 	.word	0x00030244

000d5434 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030244 	.word	0x00030244

000d5444 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <malloc+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	681b      	ldr	r3, [r3, #0]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	0003021c 	.word	0x0003021c

000d5454 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <free+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	685b      	ldr	r3, [r3, #4]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	0003021c 	.word	0x0003021c

000d5464 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <snprintf+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	69db      	ldr	r3, [r3, #28]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	0003021c 	.word	0x0003021c

000d5474 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <vsnprintf+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003021c 	.word	0x0003021c

000d5484 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <__errno+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003021c 	.word	0x0003021c

000d5494 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <newlib_impure_ptr_callback+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003021c 	.word	0x0003021c

000d54a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54a4:	2200      	movs	r2, #0
   d54a6:	6840      	ldr	r0, [r0, #4]
   d54a8:	4611      	mov	r1, r2
   d54aa:	f7ff bf93 	b.w	d53d4 <network_listening>

000d54ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d54ae:	2200      	movs	r2, #0
   d54b0:	6840      	ldr	r0, [r0, #4]
   d54b2:	4611      	mov	r1, r2
   d54b4:	f7ff bf9e 	b.w	d53f4 <network_get_listen_timeout>

000d54b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54b8:	6840      	ldr	r0, [r0, #4]
   d54ba:	2200      	movs	r2, #0
   d54bc:	f7ff bf92 	b.w	d53e4 <network_set_listen_timeout>

000d54c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	2200      	movs	r2, #0
   d54c4:	f081 0101 	eor.w	r1, r1, #1
   d54c8:	f7ff bf7c 	b.w	d53c4 <network_listen>

000d54cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54cc:	2300      	movs	r3, #0
   d54ce:	6840      	ldr	r0, [r0, #4]
   d54d0:	461a      	mov	r2, r3
   d54d2:	4619      	mov	r1, r3
   d54d4:	f7ff bf6e 	b.w	d53b4 <network_off>

000d54d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d54d8:	2300      	movs	r3, #0
   d54da:	6840      	ldr	r0, [r0, #4]
   d54dc:	461a      	mov	r2, r3
   d54de:	4619      	mov	r1, r3
   d54e0:	f7ff bf60 	b.w	d53a4 <network_on>

000d54e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54e4:	2200      	movs	r2, #0
   d54e6:	6840      	ldr	r0, [r0, #4]
   d54e8:	4611      	mov	r1, r2
   d54ea:	f7ff bf53 	b.w	d5394 <network_ready>

000d54ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54ee:	2200      	movs	r2, #0
   d54f0:	6840      	ldr	r0, [r0, #4]
   d54f2:	4611      	mov	r1, r2
   d54f4:	f7ff bf3e 	b.w	d5374 <network_connecting>

000d54f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54f8:	6840      	ldr	r0, [r0, #4]
   d54fa:	2200      	movs	r2, #0
   d54fc:	2102      	movs	r1, #2
   d54fe:	f7ff bf41 	b.w	d5384 <network_disconnect>

000d5502 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5502:	2300      	movs	r3, #0
   d5504:	6840      	ldr	r0, [r0, #4]
   d5506:	461a      	mov	r2, r3
   d5508:	f7ff bf2c 	b.w	d5364 <network_connect>

000d550c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d550c:	4b02      	ldr	r3, [pc, #8]	; (d5518 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d550e:	2203      	movs	r2, #3
   d5510:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5512:	4a02      	ldr	r2, [pc, #8]	; (d551c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5514:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5516:	4770      	bx	lr
   d5518:	2003e650 	.word	0x2003e650
   d551c:	000d7124 	.word	0x000d7124

000d5520 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5520:	2100      	movs	r1, #0
   d5522:	f7ff be9b 	b.w	d525c <hal_spi_acquire>

000d5526 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5526:	2100      	movs	r1, #0
   d5528:	f7ff bea0 	b.w	d526c <hal_spi_release>

000d552c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d552c:	b510      	push	{r4, lr}
   d552e:	4604      	mov	r4, r0
   d5530:	4608      	mov	r0, r1
{
    _spi = spi;
   d5532:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5534:	f7ff fe72 	bl	d521c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5538:	2300      	movs	r3, #0
   d553a:	6063      	str	r3, [r4, #4]
}
   d553c:	4620      	mov	r0, r4
   d553e:	bd10      	pop	{r4, pc}

000d5540 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d5540:	b513      	push	{r0, r1, r4, lr}
   d5542:	4604      	mov	r4, r0
    if (!lock())
   d5544:	7800      	ldrb	r0, [r0, #0]
{
   d5546:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5548:	f7ff ffea 	bl	d5520 <_ZN8SPIClass4lockEv.isra.0>
   d554c:	9901      	ldr	r1, [sp, #4]
   d554e:	b940      	cbnz	r0, d5562 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d5550:	7820      	ldrb	r0, [r4, #0]
   d5552:	f7ff fe53 	bl	d51fc <hal_spi_begin>
        unlock();
   d5556:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5558:	b002      	add	sp, #8
   d555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d555e:	f7ff bfe2 	b.w	d5526 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5562:	b002      	add	sp, #8
   d5564:	bd10      	pop	{r4, pc}

000d5566 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5566:	7800      	ldrb	r0, [r0, #0]
   d5568:	f7ff bfdd 	b.w	d5526 <_ZN8SPIClass6unlockEv.isra.0>

000d556c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d556c:	0840      	lsrs	r0, r0, #1
{
   d556e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5570:	6018      	str	r0, [r3, #0]
   d5572:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5574:	6818      	ldr	r0, [r3, #0]
   d5576:	4288      	cmp	r0, r1
   d5578:	b2e5      	uxtb	r5, r4
   d557a:	d906      	bls.n	d558a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d557c:	3401      	adds	r4, #1
   d557e:	2c08      	cmp	r4, #8
   d5580:	d002      	beq.n	d5588 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5582:	0840      	lsrs	r0, r0, #1
   d5584:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5586:	e7f5      	b.n	d5574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5588:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d558c:	5d5b      	ldrb	r3, [r3, r5]
   d558e:	7013      	strb	r3, [r2, #0]
}
   d5590:	bd30      	pop	{r4, r5, pc}
   d5592:	bf00      	nop
   d5594:	000d7158 	.word	0x000d7158

000d5598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d559c:	4606      	mov	r6, r0
   d559e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d55a0:	7800      	ldrb	r0, [r0, #0]
{
   d55a2:	460c      	mov	r4, r1
    CHECK(lock());
   d55a4:	f7ff ffbc 	bl	d5520 <_ZN8SPIClass4lockEv.isra.0>
   d55a8:	2800      	cmp	r0, #0
   d55aa:	db1b      	blt.n	d55e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d55ac:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d55ae:	2214      	movs	r2, #20
   d55b0:	2100      	movs	r1, #0
   d55b2:	a809      	add	r0, sp, #36	; 0x24
   d55b4:	f001 fa24 	bl	d6a00 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d55b8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d55ba:	2200      	movs	r2, #0
   d55bc:	a909      	add	r1, sp, #36	; 0x24
   d55be:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d55c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d55c4:	f7ff fe3a 	bl	d523c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d55c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d55cc:	b113      	cbz	r3, d55d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d55ce:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d55d2:	b155      	cbz	r5, d55ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d55d4:	2700      	movs	r7, #0
   d55d6:	46b9      	mov	r9, r7
   d55d8:	46b8      	mov	r8, r7
   d55da:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d55dc:	7923      	ldrb	r3, [r4, #4]
   d55de:	b15d      	cbz	r5, d55f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d55e0:	b1c3      	cbz	r3, d5614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d55e2:	2000      	movs	r0, #0
}
   d55e4:	b00f      	add	sp, #60	; 0x3c
   d55e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d55ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d55ee:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d55f2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d55f6:	e7f1      	b.n	d55dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d55f8:	2b00      	cmp	r3, #0
   d55fa:	d135      	bne.n	d5668 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d55fc:	68a3      	ldr	r3, [r4, #8]
   d55fe:	4543      	cmp	r3, r8
   d5600:	d108      	bne.n	d5614 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5602:	f88d 9020 	strb.w	r9, [sp, #32]
   d5606:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d560a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d560e:	89a3      	ldrh	r3, [r4, #12]
   d5610:	429a      	cmp	r2, r3
   d5612:	d0e6      	beq.n	d55e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5614:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5616:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5618:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d561c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d561e:	ab04      	add	r3, sp, #16
   d5620:	f10d 020f 	add.w	r2, sp, #15
   d5624:	f7ff ffa2 	bl	d556c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5628:	7921      	ldrb	r1, [r4, #4]
   d562a:	b985      	cbnz	r5, d564e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d562c:	b989      	cbnz	r1, d5652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d562e:	68a3      	ldr	r3, [r4, #8]
   d5630:	4543      	cmp	r3, r8
   d5632:	d30e      	bcc.n	d5652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5634:	f88d 9020 	strb.w	r9, [sp, #32]
   d5638:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d563c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5640:	89a3      	ldrh	r3, [r4, #12]
   d5642:	429a      	cmp	r2, r3
   d5644:	d105      	bne.n	d5652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5646:	9b04      	ldr	r3, [sp, #16]
   d5648:	4543      	cmp	r3, r8
   d564a:	d102      	bne.n	d5652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d564c:	e7c9      	b.n	d55e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d564e:	2900      	cmp	r1, #0
   d5650:	d1f9      	bne.n	d5646 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5652:	2300      	movs	r3, #0
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	7b63      	ldrb	r3, [r4, #13]
   d5658:	9300      	str	r3, [sp, #0]
   d565a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d565e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5660:	7830      	ldrb	r0, [r6, #0]
   d5662:	f7ff fdf3 	bl	d524c <hal_spi_set_settings>
   d5666:	e7bc      	b.n	d55e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5668:	e9cd 5500 	strd	r5, r5, [sp]
   d566c:	462b      	mov	r3, r5
   d566e:	462a      	mov	r2, r5
   d5670:	2101      	movs	r1, #1
   d5672:	e7f5      	b.n	d5660 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5674 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5674:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5676:	7800      	ldrb	r0, [r0, #0]
   d5678:	f7ff fdc8 	bl	d520c <hal_spi_transfer>
}
   d567c:	b2c0      	uxtb	r0, r0
   d567e:	bd08      	pop	{r3, pc}

000d5680 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5680:	b510      	push	{r4, lr}
   d5682:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5684:	6800      	ldr	r0, [r0, #0]
   d5686:	b118      	cbz	r0, d5690 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5688:	f7ff fee4 	bl	d5454 <free>
            wakeupSource_ = nullptr;
   d568c:	2300      	movs	r3, #0
   d568e:	6023      	str	r3, [r4, #0]
        }
    }
   d5690:	bd10      	pop	{r4, pc}

000d5692 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5692:	b510      	push	{r4, lr}
   d5694:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5696:	f7ff fff3 	bl	d5680 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d569a:	4620      	mov	r0, r4
   d569c:	bd10      	pop	{r4, pc}
	...

000d56a0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d56a0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d56a2:	4b09      	ldr	r3, [pc, #36]	; (d56c8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d56a4:	4c09      	ldr	r4, [pc, #36]	; (d56cc <_GLOBAL__sub_I_System+0x2c>)
   d56a6:	2202      	movs	r2, #2
   d56a8:	2000      	movs	r0, #0
   d56aa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d56ac:	4b08      	ldr	r3, [pc, #32]	; (d56d0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d56ae:	6020      	str	r0, [r4, #0]
   d56b0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d56b2:	71a0      	strb	r0, [r4, #6]
   d56b4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56b6:	f7ff fe29 	bl	d530c <set_system_mode>
SystemClass System;
   d56ba:	4620      	mov	r0, r4
   d56bc:	4a05      	ldr	r2, [pc, #20]	; (d56d4 <_GLOBAL__sub_I_System+0x34>)
   d56be:	4906      	ldr	r1, [pc, #24]	; (d56d8 <_GLOBAL__sub_I_System+0x38>)
   d56c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d56c4:	f001 b85c 	b.w	d6780 <__aeabi_atexit>
   d56c8:	2003e664 	.word	0x2003e664
   d56cc:	2003e658 	.word	0x2003e658
   d56d0:	ffff0000 	.word	0xffff0000
   d56d4:	2003e5b8 	.word	0x2003e5b8
   d56d8:	000d5693 	.word	0x000d5693

000d56dc <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d56dc:	b570      	push	{r4, r5, r6, lr}
   d56de:	b086      	sub	sp, #24
   d56e0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d56e2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d56e4:	4668      	mov	r0, sp
   d56e6:	f000 fa33 	bl	d5b50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d56ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56ec:	1d34      	adds	r4, r6, #4
   d56ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56f0:	682b      	ldr	r3, [r5, #0]
   d56f2:	7023      	strb	r3, [r4, #0]
    }
   d56f4:	4630      	mov	r0, r6
   d56f6:	b006      	add	sp, #24
   d56f8:	bd70      	pop	{r4, r5, r6, pc}

000d56fa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d56fa:	b510      	push	{r4, lr}
   d56fc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d56fe:	6800      	ldr	r0, [r0, #0]
   d5700:	b108      	cbz	r0, d5706 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5702:	f7ff fcb3 	bl	d506c <os_mutex_recursive_destroy>
    }
   d5706:	4620      	mov	r0, r4
   d5708:	bd10      	pop	{r4, pc}

000d570a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d570a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d570c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d570e:	4604      	mov	r4, r0
      if (_M_manager)
   d5710:	b113      	cbz	r3, d5718 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5712:	2203      	movs	r2, #3
   d5714:	4601      	mov	r1, r0
   d5716:	4798      	blx	r3
    }
   d5718:	4620      	mov	r0, r4
   d571a:	bd10      	pop	{r4, pc}

000d571c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d571c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d571e:	4c06      	ldr	r4, [pc, #24]	; (d5738 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5720:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5722:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5724:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5726:	f7ff fc99 	bl	d505c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d572a:	4620      	mov	r0, r4
   d572c:	4a03      	ldr	r2, [pc, #12]	; (d573c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d572e:	4904      	ldr	r1, [pc, #16]	; (d5740 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5734:	f001 b824 	b.w	d6780 <__aeabi_atexit>
   d5738:	2003e668 	.word	0x2003e668
   d573c:	2003e5b8 	.word	0x2003e5b8
   d5740:	000d56fb 	.word	0x000d56fb

000d5744 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5746:	4606      	mov	r6, r0
   d5748:	460d      	mov	r5, r1
  size_t n = 0;
   d574a:	188f      	adds	r7, r1, r2
   d574c:	2400      	movs	r4, #0
  while (size--) {
   d574e:	42bd      	cmp	r5, r7
   d5750:	d00c      	beq.n	d576c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5752:	6833      	ldr	r3, [r6, #0]
   d5754:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5758:	689b      	ldr	r3, [r3, #8]
   d575a:	4630      	mov	r0, r6
   d575c:	4798      	blx	r3
     if (chunk>=0)
   d575e:	1e03      	subs	r3, r0, #0
   d5760:	db01      	blt.n	d5766 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5762:	441c      	add	r4, r3
  while (size--) {
   d5764:	e7f3      	b.n	d574e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5766:	2c00      	cmp	r4, #0
   d5768:	bf08      	it	eq
   d576a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d576c:	4620      	mov	r0, r4
   d576e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5770 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5770:	b513      	push	{r0, r1, r4, lr}
   d5772:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5774:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5776:	b159      	cbz	r1, d5790 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5778:	9101      	str	r1, [sp, #4]
   d577a:	f001 f977 	bl	d6a6c <strlen>
   d577e:	6823      	ldr	r3, [r4, #0]
   d5780:	9901      	ldr	r1, [sp, #4]
   d5782:	68db      	ldr	r3, [r3, #12]
   d5784:	4602      	mov	r2, r0
   d5786:	4620      	mov	r0, r4
    }
   d5788:	b002      	add	sp, #8
   d578a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d578e:	4718      	bx	r3
    }
   d5790:	b002      	add	sp, #8
   d5792:	bd10      	pop	{r4, pc}

000d5794 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5794:	b508      	push	{r3, lr}
  return write(str);
   d5796:	f7ff ffeb 	bl	d5770 <_ZN5Print5writeEPKc>
}
   d579a:	bd08      	pop	{r3, pc}

000d579c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d579c:	6803      	ldr	r3, [r0, #0]
   d579e:	689b      	ldr	r3, [r3, #8]
   d57a0:	4718      	bx	r3

000d57a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d57a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d57a4:	210d      	movs	r1, #13
{
   d57a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d57a8:	f7ff fff8 	bl	d579c <_ZN5Print5printEc>
  n += print('\n');
   d57ac:	210a      	movs	r1, #10
  size_t n = print('\r');
   d57ae:	4604      	mov	r4, r0
  n += print('\n');
   d57b0:	4628      	mov	r0, r5
   d57b2:	f7ff fff3 	bl	d579c <_ZN5Print5printEc>
  return n;
}
   d57b6:	4420      	add	r0, r4
   d57b8:	bd38      	pop	{r3, r4, r5, pc}

000d57ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d57ba:	b538      	push	{r3, r4, r5, lr}
   d57bc:	4605      	mov	r5, r0
  return write(str);
   d57be:	f7ff ffd7 	bl	d5770 <_ZN5Print5writeEPKc>
   d57c2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d57c4:	4628      	mov	r0, r5
   d57c6:	f7ff ffec 	bl	d57a2 <_ZN5Print7printlnEv>
  return n;
}
   d57ca:	4420      	add	r0, r4
   d57cc:	bd38      	pop	{r3, r4, r5, pc}

000d57ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d57ce:	b530      	push	{r4, r5, lr}
   d57d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d57d2:	2300      	movs	r3, #0
   d57d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57d8:	2a01      	cmp	r2, #1
   d57da:	bf98      	it	ls
   d57dc:	220a      	movls	r2, #10
   d57de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d57e0:	460d      	mov	r5, r1
   d57e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d57e6:	fb01 5312 	mls	r3, r1, r2, r5
   d57ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57ee:	2b09      	cmp	r3, #9
   d57f0:	bf94      	ite	ls
   d57f2:	3330      	addls	r3, #48	; 0x30
   d57f4:	3337      	addhi	r3, #55	; 0x37
   d57f6:	b2db      	uxtb	r3, r3
  } while(n);
   d57f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d57fe:	d9ef      	bls.n	d57e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5800:	4621      	mov	r1, r4
   d5802:	f7ff ffb5 	bl	d5770 <_ZN5Print5writeEPKc>
}
   d5806:	b00b      	add	sp, #44	; 0x2c
   d5808:	bd30      	pop	{r4, r5, pc}

000d580a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d580e:	b086      	sub	sp, #24
   d5810:	af00      	add	r7, sp, #0
   d5812:	4605      	mov	r5, r0
   d5814:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5816:	1d38      	adds	r0, r7, #4
   d5818:	2114      	movs	r1, #20
{
   d581a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d581c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d581e:	f7ff fe29 	bl	d5474 <vsnprintf>

    if (n<bufsize)
   d5822:	2813      	cmp	r0, #19
   d5824:	d80e      	bhi.n	d5844 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5826:	1d39      	adds	r1, r7, #4
   d5828:	4628      	mov	r0, r5
   d582a:	f7ff ffa1 	bl	d5770 <_ZN5Print5writeEPKc>
   d582e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5830:	b11e      	cbz	r6, d583a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5832:	4628      	mov	r0, r5
   d5834:	f7ff ffb5 	bl	d57a2 <_ZN5Print7printlnEv>
   d5838:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d583a:	4620      	mov	r0, r4
   d583c:	3718      	adds	r7, #24
   d583e:	46bd      	mov	sp, r7
   d5840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5844:	f100 0308 	add.w	r3, r0, #8
   d5848:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d584c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d584e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5852:	4622      	mov	r2, r4
   d5854:	1c41      	adds	r1, r0, #1
   d5856:	683b      	ldr	r3, [r7, #0]
   d5858:	4668      	mov	r0, sp
   d585a:	f7ff fe0b 	bl	d5474 <vsnprintf>
  return write(str);
   d585e:	4669      	mov	r1, sp
   d5860:	4628      	mov	r0, r5
   d5862:	f7ff ff85 	bl	d5770 <_ZN5Print5writeEPKc>
   d5866:	4604      	mov	r4, r0
   d5868:	46c5      	mov	sp, r8
   d586a:	e7e1      	b.n	d5830 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d586c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d586c:	b510      	push	{r4, lr}
   d586e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5870:	f7ff fbec 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5874:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5876:	6823      	ldr	r3, [r4, #0]
   d5878:	4620      	mov	r0, r4
   d587a:	695b      	ldr	r3, [r3, #20]
   d587c:	4798      	blx	r3
    if (c >= 0) return c;
   d587e:	2800      	cmp	r0, #0
   d5880:	da08      	bge.n	d5894 <_ZN6Stream9timedReadEv+0x28>
   d5882:	f7ff fbe3 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d5886:	68e3      	ldr	r3, [r4, #12]
   d5888:	1ac0      	subs	r0, r0, r3
   d588a:	68a3      	ldr	r3, [r4, #8]
   d588c:	4298      	cmp	r0, r3
   d588e:	d3f2      	bcc.n	d5876 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d5890:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5894:	bd10      	pop	{r4, pc}

000d5896 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5898:	4606      	mov	r6, r0
   d589a:	460d      	mov	r5, r1
   d589c:	4617      	mov	r7, r2
  size_t count = 0;
   d589e:	2400      	movs	r4, #0
  while (count < length) {
   d58a0:	42bc      	cmp	r4, r7
   d58a2:	d007      	beq.n	d58b4 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d58a4:	4630      	mov	r0, r6
   d58a6:	f7ff ffe1 	bl	d586c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d58aa:	1e03      	subs	r3, r0, #0
   d58ac:	db02      	blt.n	d58b4 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d58ae:	552b      	strb	r3, [r5, r4]
    count++;
   d58b0:	3401      	adds	r4, #1
  while (count < length) {
   d58b2:	e7f5      	b.n	d58a0 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d58b4:	4620      	mov	r0, r4
   d58b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58b8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d58b8:	2300      	movs	r3, #0
   d58ba:	6840      	ldr	r0, [r0, #4]
   d58bc:	461a      	mov	r2, r3
   d58be:	4619      	mov	r1, r3
   d58c0:	f7ff bd70 	b.w	d53a4 <network_on>

000d58c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d58c4:	4b01      	ldr	r3, [pc, #4]	; (d58cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d58c6:	4a02      	ldr	r2, [pc, #8]	; (d58d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d58c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d58ca:	4770      	bx	lr
   d58cc:	2003e66c 	.word	0x2003e66c
   d58d0:	000d7168 	.word	0x000d7168

000d58d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58d4:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58d6:	681a      	ldr	r2, [r3, #0]
   d58d8:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d58dc:	4770      	bx	lr
   d58de:	bf00      	nop
   d58e0:	2003e550 	.word	0x2003e550
   d58e4:	2003e670 	.word	0x2003e670

000d58e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d58e8:	2100      	movs	r1, #0
   d58ea:	f7ff bd17 	b.w	d531c <system_delay_ms>

000d58ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d58ee:	b510      	push	{r4, lr}
   d58f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58f2:	f7ff ff0a 	bl	d570a <_ZNSt14_Function_baseD1Ev>
   d58f6:	4620      	mov	r0, r4
   d58f8:	bd10      	pop	{r4, pc}
	...

000d58fc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d58fc:	4803      	ldr	r0, [pc, #12]	; (d590c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d58fe:	4a04      	ldr	r2, [pc, #16]	; (d5910 <_GLOBAL__sub_I_RGB+0x14>)
   d5900:	4904      	ldr	r1, [pc, #16]	; (d5914 <_GLOBAL__sub_I_RGB+0x18>)
   d5902:	2300      	movs	r3, #0
   d5904:	6083      	str	r3, [r0, #8]
   d5906:	f000 bf3b 	b.w	d6780 <__aeabi_atexit>
   d590a:	bf00      	nop
   d590c:	2003e674 	.word	0x2003e674
   d5910:	2003e5b8 	.word	0x2003e5b8
   d5914:	000d58ef 	.word	0x000d58ef

000d5918 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5918:	4b01      	ldr	r3, [pc, #4]	; (d5920 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d591a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d591c:	4770      	bx	lr
   d591e:	bf00      	nop
   d5920:	2003e554 	.word	0x2003e554

000d5924 <serialEventRun>:
{
   d5924:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5926:	4b0b      	ldr	r3, [pc, #44]	; (d5954 <serialEventRun+0x30>)
   d5928:	b143      	cbz	r3, d593c <serialEventRun+0x18>
   d592a:	f000 f97d 	bl	d5c28 <_Z16_fetch_usbserialv>
   d592e:	6803      	ldr	r3, [r0, #0]
   d5930:	691b      	ldr	r3, [r3, #16]
   d5932:	4798      	blx	r3
   d5934:	2800      	cmp	r0, #0
   d5936:	dd01      	ble.n	d593c <serialEventRun+0x18>
        serialEvent();
   d5938:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d593c:	4b06      	ldr	r3, [pc, #24]	; (d5958 <serialEventRun+0x34>)
   d593e:	b143      	cbz	r3, d5952 <serialEventRun+0x2e>
   d5940:	f000 f9f0 	bl	d5d24 <_Z22__fetch_global_Serial1v>
   d5944:	6803      	ldr	r3, [r0, #0]
   d5946:	691b      	ldr	r3, [r3, #16]
   d5948:	4798      	blx	r3
   d594a:	2800      	cmp	r0, #0
   d594c:	dd01      	ble.n	d5952 <serialEventRun+0x2e>
        serialEvent1();
   d594e:	f3af 8000 	nop.w
}
   d5952:	bd08      	pop	{r3, pc}
	...

000d595c <_post_loop>:
{
   d595c:	b508      	push	{r3, lr}
	serialEventRun();
   d595e:	f7ff ffe1 	bl	d5924 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5962:	f7ff fb73 	bl	d504c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5966:	4b01      	ldr	r3, [pc, #4]	; (d596c <_post_loop+0x10>)
   d5968:	6018      	str	r0, [r3, #0]
}
   d596a:	bd08      	pop	{r3, pc}
   d596c:	2003e7d4 	.word	0x2003e7d4

000d5970 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5970:	4802      	ldr	r0, [pc, #8]	; (d597c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5972:	4a03      	ldr	r2, [pc, #12]	; (d5980 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5974:	4903      	ldr	r1, [pc, #12]	; (d5984 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5976:	1a12      	subs	r2, r2, r0
   d5978:	f001 b834 	b.w	d69e4 <memcpy>
   d597c:	2003f400 	.word	0x2003f400
   d5980:	2003f404 	.word	0x2003f404
   d5984:	000d7540 	.word	0x000d7540

000d5988 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5988:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d598a:	2300      	movs	r3, #0
   d598c:	9300      	str	r3, [sp, #0]
   d598e:	461a      	mov	r2, r3
   d5990:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5994:	f7ff fcdc 	bl	d5350 <system_ctrl_set_result>
}
   d5998:	b003      	add	sp, #12
   d599a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d59a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d59a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d59a2:	8843      	ldrh	r3, [r0, #2]
   d59a4:	2b0a      	cmp	r3, #10
   d59a6:	d008      	beq.n	d59ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d59a8:	2b50      	cmp	r3, #80	; 0x50
   d59aa:	d10b      	bne.n	d59c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d59ac:	4b09      	ldr	r3, [pc, #36]	; (d59d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d59ae:	681b      	ldr	r3, [r3, #0]
   d59b0:	b14b      	cbz	r3, d59c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d59b2:	b003      	add	sp, #12
   d59b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d59b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d59ba:	f7ff ffe5 	bl	d5988 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d59be:	b003      	add	sp, #12
   d59c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d59c4:	2300      	movs	r3, #0
   d59c6:	9300      	str	r3, [sp, #0]
   d59c8:	461a      	mov	r2, r3
   d59ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d59ce:	f7ff fcbf 	bl	d5350 <system_ctrl_set_result>
}
   d59d2:	e7f4      	b.n	d59be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d59d4:	2003e688 	.word	0x2003e688

000d59d8 <module_user_init_hook>:
{
   d59d8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d59da:	4c12      	ldr	r4, [pc, #72]	; (d5a24 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d59dc:	4812      	ldr	r0, [pc, #72]	; (d5a28 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d59de:	4d13      	ldr	r5, [pc, #76]	; (d5a2c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d59e0:	2100      	movs	r1, #0
   d59e2:	f7ff fd57 	bl	d5494 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d59e6:	6823      	ldr	r3, [r4, #0]
   d59e8:	42ab      	cmp	r3, r5
   d59ea:	4b11      	ldr	r3, [pc, #68]	; (d5a30 <module_user_init_hook+0x58>)
   d59ec:	bf0c      	ite	eq
   d59ee:	2201      	moveq	r2, #1
   d59f0:	2200      	movne	r2, #0
   d59f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d59f4:	d002      	beq.n	d59fc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d59f6:	f7ff ffbb 	bl	d5970 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d59fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d59fc:	f7ff fb16 	bl	d502c <HAL_RNG_GetRandomNumber>
   d5a00:	4604      	mov	r4, r0
    srand(seed);
   d5a02:	f001 f805 	bl	d6a10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a06:	4b0b      	ldr	r3, [pc, #44]	; (d5a34 <module_user_init_hook+0x5c>)
   d5a08:	b113      	cbz	r3, d5a10 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a10:	2100      	movs	r1, #0
   d5a12:	4808      	ldr	r0, [pc, #32]	; (d5a34 <module_user_init_hook+0x5c>)
   d5a14:	f7ff fd0e 	bl	d5434 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a1c:	4806      	ldr	r0, [pc, #24]	; (d5a38 <module_user_init_hook+0x60>)
   d5a1e:	2100      	movs	r1, #0
   d5a20:	f7ff bc8c 	b.w	d533c <system_ctrl_set_app_request_handler>
   d5a24:	2003f400 	.word	0x2003f400
   d5a28:	000d5919 	.word	0x000d5919
   d5a2c:	9a271c1e 	.word	0x9a271c1e
   d5a30:	2003e684 	.word	0x2003e684
   d5a34:	00000000 	.word	0x00000000
   d5a38:	000d59a1 	.word	0x000d59a1

000d5a3c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5a3c:	4770      	bx	lr

000d5a3e <_ZN9IPAddressD0Ev>:
   d5a3e:	b510      	push	{r4, lr}
   d5a40:	2118      	movs	r1, #24
   d5a42:	4604      	mov	r4, r0
   d5a44:	f000 fea1 	bl	d678a <_ZdlPvj>
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5a4e:	7d03      	ldrb	r3, [r0, #20]
   d5a50:	2b06      	cmp	r3, #6
{
   d5a52:	b08d      	sub	sp, #52	; 0x34
   d5a54:	460e      	mov	r6, r1
   d5a56:	f100 0704 	add.w	r7, r0, #4
   d5a5a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5a5e:	d012      	beq.n	d5a86 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5a60:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5a64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a68:	220a      	movs	r2, #10
   d5a6a:	4630      	mov	r0, r6
   d5a6c:	f7ff feaf 	bl	d57ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a70:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a72:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5a74:	d019      	beq.n	d5aaa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5a76:	2c00      	cmp	r4, #0
   d5a78:	d0f4      	beq.n	d5a64 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5a7a:	212e      	movs	r1, #46	; 0x2e
   d5a7c:	4630      	mov	r0, r6
   d5a7e:	f7ff fe8d 	bl	d579c <_ZN5Print5printEc>
   d5a82:	4404      	add	r4, r0
   d5a84:	e7ee      	b.n	d5a64 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a86:	232f      	movs	r3, #47	; 0x2f
   d5a88:	466a      	mov	r2, sp
   d5a8a:	4639      	mov	r1, r7
   d5a8c:	200a      	movs	r0, #10
		buf[0] = 0;
   d5a8e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a92:	f7ff faf3 	bl	d507c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5a96:	4668      	mov	r0, sp
   d5a98:	f000 ffe8 	bl	d6a6c <strlen>
   d5a9c:	6833      	ldr	r3, [r6, #0]
   d5a9e:	4602      	mov	r2, r0
   d5aa0:	68db      	ldr	r3, [r3, #12]
   d5aa2:	4669      	mov	r1, sp
   d5aa4:	4630      	mov	r0, r6
   d5aa6:	4798      	blx	r3
   d5aa8:	4604      	mov	r4, r0
    }
    return n;
}
   d5aaa:	4620      	mov	r0, r4
   d5aac:	b00d      	add	sp, #52	; 0x34
   d5aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ab0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5ab0:	b510      	push	{r4, lr}
   d5ab2:	4b05      	ldr	r3, [pc, #20]	; (d5ac8 <_ZN9IPAddressC1Ev+0x18>)
   d5ab4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5ab6:	2211      	movs	r2, #17
   d5ab8:	f840 3b04 	str.w	r3, [r0], #4
   d5abc:	2100      	movs	r1, #0
   d5abe:	f000 ff9f 	bl	d6a00 <memset>
}
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	bd10      	pop	{r4, pc}
   d5ac6:	bf00      	nop
   d5ac8:	000d7190 	.word	0x000d7190

000d5acc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5acc:	4603      	mov	r3, r0
   d5ace:	4a07      	ldr	r2, [pc, #28]	; (d5aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ad0:	b510      	push	{r4, lr}
   d5ad2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5ad6:	f101 0210 	add.w	r2, r1, #16
   d5ada:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ade:	f843 4b04 	str.w	r4, [r3], #4
   d5ae2:	4291      	cmp	r1, r2
   d5ae4:	d1f9      	bne.n	d5ada <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ae6:	780a      	ldrb	r2, [r1, #0]
   d5ae8:	701a      	strb	r2, [r3, #0]
}
   d5aea:	bd10      	pop	{r4, pc}
   d5aec:	000d7190 	.word	0x000d7190

000d5af0 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5af0:	7d03      	ldrb	r3, [r0, #20]
   d5af2:	2b04      	cmp	r3, #4
   d5af4:	d104      	bne.n	d5b00 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5af6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5af8:	3800      	subs	r0, #0
   d5afa:	bf18      	it	ne
   d5afc:	2001      	movne	r0, #1
   d5afe:	4770      	bx	lr
    } else if (version() == 6) {
   d5b00:	2b06      	cmp	r3, #6
   d5b02:	d107      	bne.n	d5b14 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5b04:	6843      	ldr	r3, [r0, #4]
   d5b06:	b93b      	cbnz	r3, d5b18 <_ZNK9IPAddresscvbEv+0x28>
   d5b08:	6883      	ldr	r3, [r0, #8]
   d5b0a:	b92b      	cbnz	r3, d5b18 <_ZNK9IPAddresscvbEv+0x28>
   d5b0c:	68c3      	ldr	r3, [r0, #12]
   d5b0e:	b91b      	cbnz	r3, d5b18 <_ZNK9IPAddresscvbEv+0x28>
   d5b10:	6900      	ldr	r0, [r0, #16]
   d5b12:	e7f1      	b.n	d5af8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5b14:	2000      	movs	r0, #0
   d5b16:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5b18:	2001      	movs	r0, #1
}
   d5b1a:	4770      	bx	lr

000d5b1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5b1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5b2e:	2304      	movs	r3, #4
   d5b30:	6041      	str	r1, [r0, #4]
   d5b32:	7503      	strb	r3, [r0, #20]
}
   d5b34:	bd10      	pop	{r4, pc}
	...

000d5b38 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d5b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b3a:	4d04      	ldr	r5, [pc, #16]	; (d5b4c <_ZN9IPAddressC1Ehhhh+0x14>)
   d5b3c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d5b3e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d5b42:	9500      	str	r5, [sp, #0]
   d5b44:	f7ff ffea 	bl	d5b1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5b48:	b003      	add	sp, #12
   d5b4a:	bd30      	pop	{r4, r5, pc}
   d5b4c:	000d7190 	.word	0x000d7190

000d5b50 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5b50:	b513      	push	{r0, r1, r4, lr}
   d5b52:	4b05      	ldr	r3, [pc, #20]	; (d5b68 <_ZN9IPAddressC1EPKh+0x18>)
   d5b54:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5b56:	78cb      	ldrb	r3, [r1, #3]
   d5b58:	9300      	str	r3, [sp, #0]
   d5b5a:	788b      	ldrb	r3, [r1, #2]
   d5b5c:	784a      	ldrb	r2, [r1, #1]
   d5b5e:	7809      	ldrb	r1, [r1, #0]
   d5b60:	f7ff ffdc 	bl	d5b1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5b64:	b002      	add	sp, #8
   d5b66:	bd10      	pop	{r4, pc}
   d5b68:	000d7190 	.word	0x000d7190

000d5b6c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b6c:	7441      	strb	r1, [r0, #17]
}
   d5b6e:	4770      	bx	lr

000d5b70 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b70:	4770      	bx	lr

000d5b72 <_ZN9USBSerial4readEv>:
{
   d5b72:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b74:	2100      	movs	r1, #0
   d5b76:	7c00      	ldrb	r0, [r0, #16]
   d5b78:	f7ff fba0 	bl	d52bc <HAL_USB_USART_Receive_Data>
}
   d5b7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b80:	bd08      	pop	{r3, pc}

000d5b82 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5b82:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5b84:	2101      	movs	r1, #1
   d5b86:	7c00      	ldrb	r0, [r0, #16]
   d5b88:	f7ff fb98 	bl	d52bc <HAL_USB_USART_Receive_Data>
}
   d5b8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b90:	bd08      	pop	{r3, pc}

000d5b92 <_ZN9USBSerial17availableForWriteEv>:
{
   d5b92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5b94:	7c00      	ldrb	r0, [r0, #16]
   d5b96:	f7ff fb89 	bl	d52ac <HAL_USB_USART_Available_Data_For_Write>
}
   d5b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b9e:	bd08      	pop	{r3, pc}

000d5ba0 <_ZN9USBSerial9availableEv>:
{
   d5ba0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5ba2:	7c00      	ldrb	r0, [r0, #16]
   d5ba4:	f7ff fb7a 	bl	d529c <HAL_USB_USART_Available_Data>
}
   d5ba8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bac:	bd08      	pop	{r3, pc}

000d5bae <_ZN9USBSerial5writeEh>:
{
   d5bae:	b513      	push	{r0, r1, r4, lr}
   d5bb0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bb2:	7c00      	ldrb	r0, [r0, #16]
{
   d5bb4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bb6:	f7ff fb79 	bl	d52ac <HAL_USB_USART_Available_Data_For_Write>
   d5bba:	2800      	cmp	r0, #0
   d5bbc:	9901      	ldr	r1, [sp, #4]
   d5bbe:	dc01      	bgt.n	d5bc4 <_ZN9USBSerial5writeEh+0x16>
   d5bc0:	7c60      	ldrb	r0, [r4, #17]
   d5bc2:	b120      	cbz	r0, d5bce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5bc4:	7c20      	ldrb	r0, [r4, #16]
   d5bc6:	f7ff fb81 	bl	d52cc <HAL_USB_USART_Send_Data>
   d5bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5bce:	b002      	add	sp, #8
   d5bd0:	bd10      	pop	{r4, pc}

000d5bd2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5bd2:	7c00      	ldrb	r0, [r0, #16]
   d5bd4:	f7ff bb82 	b.w	d52dc <HAL_USB_USART_Flush_Data>

000d5bd8 <_ZN9USBSerialD0Ev>:
   d5bd8:	b510      	push	{r4, lr}
   d5bda:	2114      	movs	r1, #20
   d5bdc:	4604      	mov	r4, r0
   d5bde:	f000 fdd4 	bl	d678a <_ZdlPvj>
   d5be2:	4620      	mov	r0, r4
   d5be4:	bd10      	pop	{r4, pc}
	...

000d5be8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5be8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bee:	4604      	mov	r4, r0
   d5bf0:	4608      	mov	r0, r1
   d5bf2:	2100      	movs	r1, #0
   d5bf4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5bf8:	4b04      	ldr	r3, [pc, #16]	; (d5c0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5bfa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5bfc:	2301      	movs	r3, #1
  _serial = serial;
   d5bfe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5c00:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5c02:	4611      	mov	r1, r2
   d5c04:	f7ff fb3a 	bl	d527c <HAL_USB_USART_Init>
}
   d5c08:	4620      	mov	r0, r4
   d5c0a:	bd10      	pop	{r4, pc}
   d5c0c:	000d71a4 	.word	0x000d71a4

000d5c10 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c10:	7c00      	ldrb	r0, [r0, #16]
   d5c12:	2200      	movs	r2, #0
   d5c14:	f7ff bb3a 	b.w	d528c <HAL_USB_USART_Begin>

000d5c18 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c1a:	2214      	movs	r2, #20
{
   d5c1c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c1e:	2100      	movs	r1, #0
   d5c20:	f000 feee 	bl	d6a00 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c24:	4620      	mov	r0, r4
   d5c26:	bd10      	pop	{r4, pc}

000d5c28 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c2a:	4c10      	ldr	r4, [pc, #64]	; (d5c6c <_Z16_fetch_usbserialv+0x44>)
{
   d5c2c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c2e:	a803      	add	r0, sp, #12
   d5c30:	f7ff fff2 	bl	d5c18 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c34:	7821      	ldrb	r1, [r4, #0]
   d5c36:	f3bf 8f5b 	dmb	ish
   d5c3a:	f011 0101 	ands.w	r1, r1, #1
   d5c3e:	d111      	bne.n	d5c64 <_Z16_fetch_usbserialv+0x3c>
   d5c40:	4620      	mov	r0, r4
   d5c42:	9101      	str	r1, [sp, #4]
   d5c44:	f7fe fa36 	bl	d40b4 <__cxa_guard_acquire>
   d5c48:	9901      	ldr	r1, [sp, #4]
   d5c4a:	b158      	cbz	r0, d5c64 <_Z16_fetch_usbserialv+0x3c>
   d5c4c:	aa03      	add	r2, sp, #12
   d5c4e:	4808      	ldr	r0, [pc, #32]	; (d5c70 <_Z16_fetch_usbserialv+0x48>)
   d5c50:	f7ff ffca 	bl	d5be8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c54:	4620      	mov	r0, r4
   d5c56:	f7fe fa32 	bl	d40be <__cxa_guard_release>
   d5c5a:	4a06      	ldr	r2, [pc, #24]	; (d5c74 <_Z16_fetch_usbserialv+0x4c>)
   d5c5c:	4906      	ldr	r1, [pc, #24]	; (d5c78 <_Z16_fetch_usbserialv+0x50>)
   d5c5e:	4804      	ldr	r0, [pc, #16]	; (d5c70 <_Z16_fetch_usbserialv+0x48>)
   d5c60:	f000 fd8e 	bl	d6780 <__aeabi_atexit>
	return _usbserial;
}
   d5c64:	4802      	ldr	r0, [pc, #8]	; (d5c70 <_Z16_fetch_usbserialv+0x48>)
   d5c66:	b008      	add	sp, #32
   d5c68:	bd10      	pop	{r4, pc}
   d5c6a:	bf00      	nop
   d5c6c:	2003e68c 	.word	0x2003e68c
   d5c70:	2003e690 	.word	0x2003e690
   d5c74:	2003e5b8 	.word	0x2003e5b8
   d5c78:	000d5b71 	.word	0x000d5b71

000d5c7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5c7c:	4770      	bx	lr

000d5c7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c7e:	7441      	strb	r1, [r0, #17]
}
   d5c80:	4770      	bx	lr

000d5c82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5c82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5c84:	7c00      	ldrb	r0, [r0, #16]
   d5c86:	f7ff fa49 	bl	d511c <hal_usart_available_data_for_write>
}
   d5c8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c8e:	bd08      	pop	{r3, pc}

000d5c90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5c92:	7c00      	ldrb	r0, [r0, #16]
   d5c94:	f7ff fa1a 	bl	d50cc <hal_usart_available>
}
   d5c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c9c:	bd08      	pop	{r3, pc}

000d5c9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5ca0:	7c00      	ldrb	r0, [r0, #16]
   d5ca2:	f7ff fa23 	bl	d50ec <hal_usart_peek>
}
   d5ca6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5caa:	bd08      	pop	{r3, pc}

000d5cac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5cac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5cae:	7c00      	ldrb	r0, [r0, #16]
   d5cb0:	f7ff fa14 	bl	d50dc <hal_usart_read>
}
   d5cb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5cb8:	bd08      	pop	{r3, pc}

000d5cba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5cba:	7c00      	ldrb	r0, [r0, #16]
   d5cbc:	f7ff ba1e 	b.w	d50fc <hal_usart_flush>

000d5cc0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5cc2:	7c45      	ldrb	r5, [r0, #17]
{
   d5cc4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5cc6:	b12d      	cbz	r5, d5cd4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5cc8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5cca:	b003      	add	sp, #12
   d5ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5cd0:	f7ff b9f4 	b.w	d50bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5cd4:	7c00      	ldrb	r0, [r0, #16]
   d5cd6:	9101      	str	r1, [sp, #4]
   d5cd8:	f7ff fa20 	bl	d511c <hal_usart_available_data_for_write>
   d5cdc:	2800      	cmp	r0, #0
   d5cde:	9901      	ldr	r1, [sp, #4]
   d5ce0:	dcf2      	bgt.n	d5cc8 <_ZN11USARTSerial5writeEh+0x8>
}
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	b003      	add	sp, #12
   d5ce6:	bd30      	pop	{r4, r5, pc}

000d5ce8 <_ZN11USARTSerialD0Ev>:
   d5ce8:	b510      	push	{r4, lr}
   d5cea:	2114      	movs	r1, #20
   d5cec:	4604      	mov	r4, r0
   d5cee:	f000 fd4c 	bl	d678a <_ZdlPvj>
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	bd10      	pop	{r4, pc}
	...

000d5cf8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5cf8:	b510      	push	{r4, lr}
   d5cfa:	f04f 0c00 	mov.w	ip, #0
   d5cfe:	4604      	mov	r4, r0
   d5d00:	4608      	mov	r0, r1
   d5d02:	4611      	mov	r1, r2
   d5d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d08:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5d0c:	4a04      	ldr	r2, [pc, #16]	; (d5d20 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5d0e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5d10:	2201      	movs	r2, #1
  _serial = serial;
   d5d12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5d14:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5d16:	461a      	mov	r2, r3
   d5d18:	f7ff f9c8 	bl	d50ac <hal_usart_init>
}
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	bd10      	pop	{r4, pc}
   d5d20:	000d71d4 	.word	0x000d71d4

000d5d24 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d24:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d26:	4c0e      	ldr	r4, [pc, #56]	; (d5d60 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d28:	7821      	ldrb	r1, [r4, #0]
   d5d2a:	f3bf 8f5b 	dmb	ish
   d5d2e:	f011 0101 	ands.w	r1, r1, #1
   d5d32:	d112      	bne.n	d5d5a <_Z22__fetch_global_Serial1v+0x36>
   d5d34:	4620      	mov	r0, r4
   d5d36:	9101      	str	r1, [sp, #4]
   d5d38:	f7fe f9bc 	bl	d40b4 <__cxa_guard_acquire>
   d5d3c:	9901      	ldr	r1, [sp, #4]
   d5d3e:	b160      	cbz	r0, d5d5a <_Z22__fetch_global_Serial1v+0x36>
   d5d40:	4a08      	ldr	r2, [pc, #32]	; (d5d64 <_Z22__fetch_global_Serial1v+0x40>)
   d5d42:	4b09      	ldr	r3, [pc, #36]	; (d5d68 <_Z22__fetch_global_Serial1v+0x44>)
   d5d44:	4809      	ldr	r0, [pc, #36]	; (d5d6c <_Z22__fetch_global_Serial1v+0x48>)
   d5d46:	f7ff ffd7 	bl	d5cf8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f7fe f9b7 	bl	d40be <__cxa_guard_release>
   d5d50:	4a07      	ldr	r2, [pc, #28]	; (d5d70 <_Z22__fetch_global_Serial1v+0x4c>)
   d5d52:	4908      	ldr	r1, [pc, #32]	; (d5d74 <_Z22__fetch_global_Serial1v+0x50>)
   d5d54:	4805      	ldr	r0, [pc, #20]	; (d5d6c <_Z22__fetch_global_Serial1v+0x48>)
   d5d56:	f000 fd13 	bl	d6780 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d5a:	4804      	ldr	r0, [pc, #16]	; (d5d6c <_Z22__fetch_global_Serial1v+0x48>)
   d5d5c:	b002      	add	sp, #8
   d5d5e:	bd10      	pop	{r4, pc}
   d5d60:	2003e6a4 	.word	0x2003e6a4
   d5d64:	2003e6a8 	.word	0x2003e6a8
   d5d68:	2003e72c 	.word	0x2003e72c
   d5d6c:	2003e7b0 	.word	0x2003e7b0
   d5d70:	2003e5b8 	.word	0x2003e5b8
   d5d74:	000d5c7d 	.word	0x000d5c7d

000d5d78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5d78:	4770      	bx	lr

000d5d7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d7c:	4606      	mov	r6, r0
   d5d7e:	4615      	mov	r5, r2
   d5d80:	460c      	mov	r4, r1
   d5d82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5d84:	42bc      	cmp	r4, r7
   d5d86:	d006      	beq.n	d5d96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5d88:	6833      	ldr	r3, [r6, #0]
   d5d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5d8e:	689b      	ldr	r3, [r3, #8]
   d5d90:	4630      	mov	r0, r6
   d5d92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5d94:	e7f6      	b.n	d5d84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5d96:	4628      	mov	r0, r5
   d5d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5d9a:	7c00      	ldrb	r0, [r0, #16]
   d5d9c:	2200      	movs	r2, #0
   d5d9e:	f7ff b9c5 	b.w	d512c <hal_i2c_write>

000d5da2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5da2:	7c00      	ldrb	r0, [r0, #16]
   d5da4:	2100      	movs	r1, #0
   d5da6:	f7ff b9c9 	b.w	d513c <hal_i2c_available>

000d5daa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5daa:	7c00      	ldrb	r0, [r0, #16]
   d5dac:	2100      	movs	r1, #0
   d5dae:	f7ff b9cd 	b.w	d514c <hal_i2c_read>

000d5db2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5db2:	7c00      	ldrb	r0, [r0, #16]
   d5db4:	2100      	movs	r1, #0
   d5db6:	f7ff b9d1 	b.w	d515c <hal_i2c_peek>

000d5dba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5dba:	7c00      	ldrb	r0, [r0, #16]
   d5dbc:	2100      	movs	r1, #0
   d5dbe:	f7ff b9d5 	b.w	d516c <hal_i2c_flush>

000d5dc2 <_ZN7TwoWireD0Ev>:
   d5dc2:	b510      	push	{r4, lr}
   d5dc4:	2114      	movs	r1, #20
   d5dc6:	4604      	mov	r4, r0
   d5dc8:	f000 fcdf 	bl	d678a <_ZdlPvj>
   d5dcc:	4620      	mov	r0, r4
   d5dce:	bd10      	pop	{r4, pc}

000d5dd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5dd0:	b510      	push	{r4, lr}
   d5dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5dd6:	4604      	mov	r4, r0
   d5dd8:	4608      	mov	r0, r1
   d5dda:	2100      	movs	r1, #0
   d5ddc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5de0:	4b03      	ldr	r3, [pc, #12]	; (d5df0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5de2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5de4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5de6:	4611      	mov	r1, r2
   d5de8:	f7ff f9d0 	bl	d518c <hal_i2c_init>
}
   d5dec:	4620      	mov	r0, r4
   d5dee:	bd10      	pop	{r4, pc}
   d5df0:	000d7204 	.word	0x000d7204

000d5df4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5df4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5df6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d5df8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5dfc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5dfe:	2201      	movs	r2, #1
   d5e00:	f04f 33ff 	mov.w	r3, #4294967295
   d5e04:	f10d 0107 	add.w	r1, sp, #7
   d5e08:	47a0      	blx	r4
}
   d5e0a:	b002      	add	sp, #8
   d5e0c:	bd10      	pop	{r4, pc}

000d5e0e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5e0e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5e10:	6803      	ldr	r3, [r0, #0]
   d5e12:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5e14:	f04f 33ff 	mov.w	r3, #4294967295
   d5e18:	46a4      	mov	ip, r4
}
   d5e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5e1e:	4760      	bx	ip

000d5e20 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5e20:	b513      	push	{r0, r1, r4, lr}
   d5e22:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5e24:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5e26:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d5e2a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5e2c:	f10d 0107 	add.w	r1, sp, #7
   d5e30:	2201      	movs	r2, #1
   d5e32:	47a0      	blx	r4
}
   d5e34:	b002      	add	sp, #8
   d5e36:	bd10      	pop	{r4, pc}

000d5e38 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d5e38:	4770      	bx	lr

000d5e3a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5e3a:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5e3c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d5e42:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d5e44:	da10      	bge.n	d5e68 <_ZN9TCPClient9connectedEv+0x2e>
   d5e46:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5e4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5e4e:	429a      	cmp	r2, r3
   d5e50:	d10a      	bne.n	d5e68 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d5e52:	6803      	ldr	r3, [r0, #0]
   d5e54:	691b      	ldr	r3, [r3, #16]
   d5e56:	4798      	blx	r3
        if (!rv) {
   d5e58:	4604      	mov	r4, r0
   d5e5a:	b928      	cbnz	r0, d5e68 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d5e5c:	682b      	ldr	r3, [r5, #0]
   d5e5e:	4628      	mov	r0, r5
   d5e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e62:	4798      	blx	r3
        rv = available();
   d5e64:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d5e66:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d5e68:	2001      	movs	r0, #1
   d5e6a:	e7fc      	b.n	d5e66 <_ZN9TCPClient9connectedEv+0x2c>

000d5e6c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5e6c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d5e6e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d5e70:	43c0      	mvns	r0, r0
   d5e72:	0fc0      	lsrs	r0, r0, #31
   d5e74:	4770      	bx	lr

000d5e76 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5e76:	4770      	bx	lr

000d5e78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5e78:	4b06      	ldr	r3, [pc, #24]	; (d5e94 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5e7a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5e7c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5e7e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5e82:	d005      	beq.n	d5e90 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5e84:	4608      	mov	r0, r1
   d5e86:	f000 fc85 	bl	d6794 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5e8a:	2800      	cmp	r0, #0
	return nullptr;
   d5e8c:	bf08      	it	eq
   d5e8e:	2400      	moveq	r4, #0
      }
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd10      	pop	{r4, pc}
   d5e94:	000d7160 	.word	0x000d7160

000d5e98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5e98:	b510      	push	{r4, lr}
   d5e9a:	21ac      	movs	r1, #172	; 0xac
   d5e9c:	4604      	mov	r4, r0
   d5e9e:	f000 fc74 	bl	d678a <_ZdlPvj>
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	bd10      	pop	{r4, pc}

000d5ea6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5ea6:	f7fe b8f8 	b.w	d409a <_ZdlPv>

000d5eaa <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d5eae:	f04f 0800 	mov.w	r8, #0
   d5eb2:	b086      	sub	sp, #24
   d5eb4:	461d      	mov	r5, r3
   d5eb6:	f8c0 8004 	str.w	r8, [r0, #4]
   d5eba:	4604      	mov	r4, r0
   d5ebc:	460e      	mov	r6, r1
   d5ebe:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5ec0:	4641      	mov	r1, r8
   d5ec2:	2210      	movs	r2, #16
   d5ec4:	a802      	add	r0, sp, #8
   d5ec6:	f000 fd9b 	bl	d6a00 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5eca:	1c6b      	adds	r3, r5, #1
   d5ecc:	d009      	beq.n	d5ee2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d5ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5ed2:	fbb5 f3f0 	udiv	r3, r5, r0
   d5ed6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5eda:	fb00 5313 	mls	r3, r0, r3, r5
   d5ede:	4358      	muls	r0, r3
   d5ee0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5ee2:	6960      	ldr	r0, [r4, #20]
   d5ee4:	2310      	movs	r3, #16
   d5ee6:	9300      	str	r3, [sp, #0]
   d5ee8:	6800      	ldr	r0, [r0, #0]
   d5eea:	ab02      	add	r3, sp, #8
   d5eec:	f241 0205 	movw	r2, #4101	; 0x1005
   d5ef0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5ef4:	f7ff f952 	bl	d519c <sock_setsockopt>
    if (ret < 0) {
   d5ef8:	2800      	cmp	r0, #0
   d5efa:	da07      	bge.n	d5f0c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5efc:	f7ff fac2 	bl	d5484 <__errno>
   d5f00:	6803      	ldr	r3, [r0, #0]
   d5f02:	6063      	str	r3, [r4, #4]
        return 0;
   d5f04:	2000      	movs	r0, #0
}
   d5f06:	b006      	add	sp, #24
   d5f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5f0c:	6960      	ldr	r0, [r4, #20]
   d5f0e:	2300      	movs	r3, #0
   d5f10:	6800      	ldr	r0, [r0, #0]
   d5f12:	463a      	mov	r2, r7
   d5f14:	4631      	mov	r1, r6
   d5f16:	f7ff f961 	bl	d51dc <sock_send>
    if (ret < 0) {
   d5f1a:	1e03      	subs	r3, r0, #0
   d5f1c:	dbee      	blt.n	d5efc <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d5f1e:	4618      	mov	r0, r3
   d5f20:	e7f1      	b.n	d5f06 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5f24 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5f24:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5f26:	6984      	ldr	r4, [r0, #24]
   d5f28:	4b0a      	ldr	r3, [pc, #40]	; (d5f54 <_ZN9TCPClientD1Ev+0x30>)
   d5f2a:	6003      	str	r3, [r0, #0]
   d5f2c:	4605      	mov	r5, r0
   d5f2e:	b17c      	cbz	r4, d5f50 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5f30:	6863      	ldr	r3, [r4, #4]
   d5f32:	3b01      	subs	r3, #1
   d5f34:	6063      	str	r3, [r4, #4]
   d5f36:	b95b      	cbnz	r3, d5f50 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d5f38:	6823      	ldr	r3, [r4, #0]
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	689b      	ldr	r3, [r3, #8]
   d5f3e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f40:	68a3      	ldr	r3, [r4, #8]
   d5f42:	3b01      	subs	r3, #1
   d5f44:	60a3      	str	r3, [r4, #8]
   d5f46:	b91b      	cbnz	r3, d5f50 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5f48:	6823      	ldr	r3, [r4, #0]
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	68db      	ldr	r3, [r3, #12]
   d5f4e:	4798      	blx	r3
   d5f50:	4628      	mov	r0, r5
   d5f52:	bd38      	pop	{r3, r4, r5, pc}
   d5f54:	000d7260 	.word	0x000d7260

000d5f58 <_ZN9TCPClientD0Ev>:
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	f7ff ffe2 	bl	d5f24 <_ZN9TCPClientD1Ev>
   d5f60:	4620      	mov	r0, r4
   d5f62:	211c      	movs	r1, #28
   d5f64:	f000 fc11 	bl	d678a <_ZdlPvj>
   d5f68:	4620      	mov	r0, r4
   d5f6a:	bd10      	pop	{r4, pc}

000d5f6c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d5f6c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5f6e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d5f70:	4b05      	ldr	r3, [pc, #20]	; (d5f88 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5f72:	4604      	mov	r4, r0
   d5f74:	358c      	adds	r5, #140	; 0x8c
   d5f76:	f844 3b04 	str.w	r3, [r4], #4
   d5f7a:	4606      	mov	r6, r0
   d5f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f80:	682b      	ldr	r3, [r5, #0]
   d5f82:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5f84:	4630      	mov	r0, r6
   d5f86:	bd70      	pop	{r4, r5, r6, pc}
   d5f88:	000d7190 	.word	0x000d7190

000d5f8c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d5f8c:	b510      	push	{r4, lr}
   d5f8e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5f90:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f94:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5f98:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d5f9a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5f9c:	d005      	beq.n	d5faa <_ZN9TCPClient4peekEv+0x1e>
   d5f9e:	6963      	ldr	r3, [r4, #20]
   d5fa0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5fa4:	4413      	add	r3, r2
   d5fa6:	7918      	ldrb	r0, [r3, #4]
}
   d5fa8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5faa:	6803      	ldr	r3, [r0, #0]
   d5fac:	691b      	ldr	r3, [r3, #16]
   d5fae:	4798      	blx	r3
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	d1f4      	bne.n	d5f9e <_ZN9TCPClient4peekEv+0x12>
   d5fb4:	f04f 30ff 	mov.w	r0, #4294967295
   d5fb8:	e7f6      	b.n	d5fa8 <_ZN9TCPClient4peekEv+0x1c>

000d5fba <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d5fba:	b510      	push	{r4, lr}
   d5fbc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5fbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5fc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5fc6:	429a      	cmp	r2, r3
int TCPClient::read() {
   d5fc8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5fca:	d008      	beq.n	d5fde <_ZN9TCPClient4readEv+0x24>
   d5fcc:	6963      	ldr	r3, [r4, #20]
   d5fce:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d5fd2:	1c51      	adds	r1, r2, #1
   d5fd4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d5fd8:	4413      	add	r3, r2
   d5fda:	7918      	ldrb	r0, [r3, #4]
}
   d5fdc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5fde:	6803      	ldr	r3, [r0, #0]
   d5fe0:	691b      	ldr	r3, [r3, #16]
   d5fe2:	4798      	blx	r3
   d5fe4:	2800      	cmp	r0, #0
   d5fe6:	d1f1      	bne.n	d5fcc <_ZN9TCPClient4readEv+0x12>
   d5fe8:	f04f 30ff 	mov.w	r0, #4294967295
   d5fec:	e7f6      	b.n	d5fdc <_ZN9TCPClient4readEv+0x22>

000d5fee <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ff0:	6943      	ldr	r3, [r0, #20]
   d5ff2:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5ff4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ff8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5ffc:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d5ffe:	4605      	mov	r5, r0
   d6000:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6002:	d016      	beq.n	d6032 <_ZN9TCPClient4readEPhj+0x44>
   d6004:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6006:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d600a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d600e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6010:	42bc      	cmp	r4, r7
   d6012:	bf28      	it	cs
   d6014:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6016:	3304      	adds	r3, #4
   d6018:	4622      	mov	r2, r4
   d601a:	4419      	add	r1, r3
   d601c:	4630      	mov	r0, r6
   d601e:	f000 fce1 	bl	d69e4 <memcpy>
   d6022:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6024:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6028:	4423      	add	r3, r4
   d602a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d602e:	4620      	mov	r0, r4
   d6030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6032:	6803      	ldr	r3, [r0, #0]
   d6034:	691b      	ldr	r3, [r3, #16]
   d6036:	4798      	blx	r3
   d6038:	2800      	cmp	r0, #0
   d603a:	d1e3      	bne.n	d6004 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d603c:	f04f 34ff 	mov.w	r4, #4294967295
   d6040:	e7f5      	b.n	d602e <_ZN9TCPClient4readEPhj+0x40>

000d6042 <_ZN9TCPClient12flush_bufferEv>:
   d6042:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6044:	2300      	movs	r3, #0
   d6046:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d604a:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d604c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6050:	4770      	bx	lr

000d6052 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6056:	461f      	mov	r7, r3
    stop();
   d6058:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d605a:	460c      	mov	r4, r1
    stop();
   d605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d605e:	b08a      	sub	sp, #40	; 0x28
   d6060:	4605      	mov	r5, r0
   d6062:	4616      	mov	r6, r2
    stop();
   d6064:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6066:	7d23      	ldrb	r3, [r4, #20]
   d6068:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d606c:	2b04      	cmp	r3, #4
   d606e:	bf0c      	ite	eq
   d6070:	2002      	moveq	r0, #2
   d6072:	200a      	movne	r0, #10
   d6074:	2206      	movs	r2, #6
   d6076:	2101      	movs	r1, #1
   d6078:	f7ff f8b8 	bl	d51ec <sock_socket>
   d607c:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6080:	696b      	ldr	r3, [r5, #20]
   d6082:	681b      	ldr	r3, [r3, #0]
   d6084:	2b00      	cmp	r3, #0
   d6086:	da08      	bge.n	d609a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6088:	682b      	ldr	r3, [r5, #0]
   d608a:	4628      	mov	r0, r5
   d608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d608e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6090:	4798      	blx	r3
}
   d6092:	4620      	mov	r0, r4
   d6094:	b00a      	add	sp, #40	; 0x28
   d6096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d609a:	4628      	mov	r0, r5
   d609c:	f7ff ffd1 	bl	d6042 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d60a0:	b1b7      	cbz	r7, d60d0 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d60a2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d60a4:	a903      	add	r1, sp, #12
   d60a6:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d60a8:	9303      	str	r3, [sp, #12]
   d60aa:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d60ae:	f7fe ffb5 	bl	d501c <if_index_to_name>
   d60b2:	2800      	cmp	r0, #0
   d60b4:	d1e8      	bne.n	d6088 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d60b6:	6968      	ldr	r0, [r5, #20]
   d60b8:	2306      	movs	r3, #6
   d60ba:	9300      	str	r3, [sp, #0]
   d60bc:	6800      	ldr	r0, [r0, #0]
   d60be:	ab03      	add	r3, sp, #12
   d60c0:	f241 020b 	movw	r2, #4107	; 0x100b
   d60c4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d60c8:	f7ff f868 	bl	d519c <sock_setsockopt>
   d60cc:	2800      	cmp	r0, #0
   d60ce:	d1db      	bne.n	d6088 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d60d0:	221c      	movs	r2, #28
   d60d2:	2100      	movs	r1, #0
   d60d4:	a803      	add	r0, sp, #12
   d60d6:	f000 fc93 	bl	d6a00 <memset>
    if (ip.version() == 4) {
   d60da:	7d23      	ldrb	r3, [r4, #20]
   d60dc:	2b04      	cmp	r3, #4
   d60de:	d11d      	bne.n	d611c <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d60e0:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d60e4:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d60e6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d60ea:	f7fe ffd7 	bl	d509c <inet_htons>
   d60ee:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d60f2:	6860      	ldr	r0, [r4, #4]
   d60f4:	f7fe ffca 	bl	d508c <inet_htonl>
   d60f8:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d60fa:	696b      	ldr	r3, [r5, #20]
   d60fc:	221c      	movs	r2, #28
   d60fe:	6818      	ldr	r0, [r3, #0]
   d6100:	a903      	add	r1, sp, #12
   d6102:	f7ff f85b 	bl	d51bc <sock_connect>
   d6106:	2800      	cmp	r0, #0
   d6108:	d1be      	bne.n	d6088 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d610a:	3404      	adds	r4, #4
   d610c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d610e:	696d      	ldr	r5, [r5, #20]
   d6110:	358c      	adds	r5, #140	; 0x8c
   d6112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6114:	6823      	ldr	r3, [r4, #0]
   d6116:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6118:	2401      	movs	r4, #1
   d611a:	e7ba      	b.n	d6092 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d611c:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6120:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6122:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d6126:	f7fe ffb9 	bl	d509c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d612a:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d612c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6130:	1d23      	adds	r3, r4, #4
   d6132:	f104 0714 	add.w	r7, r4, #20
   d6136:	6818      	ldr	r0, [r3, #0]
   d6138:	6859      	ldr	r1, [r3, #4]
   d613a:	4632      	mov	r2, r6
   d613c:	c203      	stmia	r2!, {r0, r1}
   d613e:	3308      	adds	r3, #8
   d6140:	42bb      	cmp	r3, r7
   d6142:	4616      	mov	r6, r2
   d6144:	d1f7      	bne.n	d6136 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d6146:	e7d8      	b.n	d60fa <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6148 <_ZN9TCPClient9availableEv>:
{
   d6148:	b530      	push	{r4, r5, lr}
   d614a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d614c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6150:	b08b      	sub	sp, #44	; 0x2c
   d6152:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6154:	b12b      	cbz	r3, d6162 <_ZN9TCPClient9availableEv+0x1a>
   d6156:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d615a:	429a      	cmp	r2, r3
   d615c:	d101      	bne.n	d6162 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d615e:	f7ff ff70 	bl	d6042 <_ZN9TCPClient12flush_bufferEv>
   d6162:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6164:	6808      	ldr	r0, [r1, #0]
   d6166:	2800      	cmp	r0, #0
   d6168:	db18      	blt.n	d619c <_ZN9TCPClient9availableEv+0x54>
   d616a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d616e:	2d7f      	cmp	r5, #127	; 0x7f
   d6170:	d814      	bhi.n	d619c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6172:	3104      	adds	r1, #4
   d6174:	2308      	movs	r3, #8
   d6176:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d617a:	4429      	add	r1, r5
   d617c:	f7ff f826 	bl	d51cc <sock_recv>
            if (ret > 0) {
   d6180:	2800      	cmp	r0, #0
   d6182:	dd13      	ble.n	d61ac <_ZN9TCPClient9availableEv+0x64>
   d6184:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6186:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d618a:	b90a      	cbnz	r2, d6190 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d618c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6190:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6192:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6196:	4410      	add	r0, r2
   d6198:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d619c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d619e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d61a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d61a6:	1ac0      	subs	r0, r0, r3
   d61a8:	b00b      	add	sp, #44	; 0x2c
   d61aa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d61ac:	f7ff f96a 	bl	d5484 <__errno>
   d61b0:	6803      	ldr	r3, [r0, #0]
   d61b2:	2b0b      	cmp	r3, #11
   d61b4:	d0f2      	beq.n	d619c <_ZN9TCPClient9availableEv+0x54>
   d61b6:	f7ff f965 	bl	d5484 <__errno>
   d61ba:	6803      	ldr	r3, [r0, #0]
   d61bc:	2b0b      	cmp	r3, #11
   d61be:	d0ed      	beq.n	d619c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d61c0:	2320      	movs	r3, #32
   d61c2:	2500      	movs	r5, #0
   d61c4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d61c8:	f7ff f95c 	bl	d5484 <__errno>
   d61cc:	6803      	ldr	r3, [r0, #0]
   d61ce:	9301      	str	r3, [sp, #4]
   d61d0:	4b08      	ldr	r3, [pc, #32]	; (d61f4 <_ZN9TCPClient9availableEv+0xac>)
   d61d2:	4909      	ldr	r1, [pc, #36]	; (d61f8 <_ZN9TCPClient9availableEv+0xb0>)
   d61d4:	9300      	str	r3, [sp, #0]
   d61d6:	aa02      	add	r2, sp, #8
   d61d8:	462b      	mov	r3, r5
   d61da:	2032      	movs	r0, #50	; 0x32
   d61dc:	f7ff f88e 	bl	d52fc <log_message>
                    sock_close(d_->sock);
   d61e0:	6963      	ldr	r3, [r4, #20]
   d61e2:	6818      	ldr	r0, [r3, #0]
   d61e4:	f7fe ffe2 	bl	d51ac <sock_close>
   d61e8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d61ea:	f04f 32ff 	mov.w	r2, #4294967295
   d61ee:	601a      	str	r2, [r3, #0]
   d61f0:	e7d4      	b.n	d619c <_ZN9TCPClient9availableEv+0x54>
   d61f2:	bf00      	nop
   d61f4:	000d722b 	.word	0x000d722b
   d61f8:	000d7224 	.word	0x000d7224

000d61fc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d61fc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d61fe:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6200:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6202:	6818      	ldr	r0, [r3, #0]
   d6204:	2800      	cmp	r0, #0
   d6206:	db01      	blt.n	d620c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6208:	f7fe ffd0 	bl	d51ac <sock_close>
   d620c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d620e:	f04f 32ff 	mov.w	r2, #4294967295
   d6212:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6214:	6960      	ldr	r0, [r4, #20]
   d6216:	2211      	movs	r2, #17
   d6218:	2100      	movs	r1, #0
   d621a:	308c      	adds	r0, #140	; 0x8c
   d621c:	f000 fbf0 	bl	d6a00 <memset>
    flush_buffer();
   d6220:	4620      	mov	r0, r4
}
   d6222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d6226:	f7ff bf0c 	b.w	d6042 <_ZN9TCPClient12flush_bufferEv>

000d622a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d622a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d622c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d622e:	4604      	mov	r4, r0
          total(0) {
   d6230:	6001      	str	r1, [r0, #0]
   d6232:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d6236:	3088      	adds	r0, #136	; 0x88
   d6238:	f7ff fc3a 	bl	d5ab0 <_ZN9IPAddressC1Ev>
}
   d623c:	4620      	mov	r0, r4
   d623e:	bd10      	pop	{r4, pc}

000d6240 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6240:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6242:	2300      	movs	r3, #0
   d6244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6248:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d624c:	4a0e      	ldr	r2, [pc, #56]	; (d6288 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d624e:	6103      	str	r3, [r0, #16]
   d6250:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6252:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6254:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6256:	20ac      	movs	r0, #172	; 0xac
   d6258:	9101      	str	r1, [sp, #4]
   d625a:	f7fd ff1a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d625e:	1e05      	subs	r5, r0, #0
   d6260:	f105 060c 	add.w	r6, r5, #12
   d6264:	d008      	beq.n	d6278 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d6266:	2301      	movs	r3, #1
   d6268:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d626c:	4b07      	ldr	r3, [pc, #28]	; (d628c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d626e:	9901      	ldr	r1, [sp, #4]
   d6270:	602b      	str	r3, [r5, #0]
   d6272:	4630      	mov	r0, r6
   d6274:	f7ff ffd9 	bl	d622a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6278:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d627a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d627e:	f7ff fee0 	bl	d6042 <_ZN9TCPClient12flush_bufferEv>
}
   d6282:	b002      	add	sp, #8
   d6284:	bd70      	pop	{r4, r5, r6, pc}
   d6286:	bf00      	nop
   d6288:	000d7260 	.word	0x000d7260
   d628c:	000d7244 	.word	0x000d7244

000d6290 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6290:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6292:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6296:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6298:	f7ff ffd2 	bl	d6240 <_ZN9TCPClientC1Ei>
}
   d629c:	4620      	mov	r0, r4
   d629e:	bd10      	pop	{r4, pc}

000d62a0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d62a0:	b510      	push	{r4, lr}
   d62a2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d62a4:	6800      	ldr	r0, [r0, #0]
   d62a6:	2800      	cmp	r0, #0
   d62a8:	db01      	blt.n	d62ae <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d62aa:	f7fe ff7f 	bl	d51ac <sock_close>
    }
}
   d62ae:	4620      	mov	r0, r4
   d62b0:	bd10      	pop	{r4, pc}

000d62b2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d62b2:	300c      	adds	r0, #12
   d62b4:	f7ff bff4 	b.w	d62a0 <_ZN9TCPClient4DataD1Ev>

000d62b8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d62b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62bc:	4698      	mov	r8, r3
    stop();
   d62be:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d62c0:	b093      	sub	sp, #76	; 0x4c
   d62c2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d62c4:	2400      	movs	r4, #0
    stop();
   d62c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d62c8:	4606      	mov	r6, r0
   d62ca:	4617      	mov	r7, r2
    stop();
   d62cc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d62ce:	4628      	mov	r0, r5
   d62d0:	466b      	mov	r3, sp
   d62d2:	4622      	mov	r2, r4
   d62d4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d62d6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d62d8:	f7fe fe58 	bl	d4f8c <netdb_getaddrinfo>
   d62dc:	4605      	mov	r5, r0
   d62de:	2800      	cmp	r0, #0
   d62e0:	d163      	bne.n	d63aa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d62e2:	9b00      	ldr	r3, [sp, #0]
   d62e4:	2b00      	cmp	r3, #0
   d62e6:	d04b      	beq.n	d6380 <_ZN9TCPClient7connectEPKctm+0xc8>
   d62e8:	695b      	ldr	r3, [r3, #20]
   d62ea:	2b00      	cmp	r3, #0
   d62ec:	d048      	beq.n	d6380 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d62ee:	a806      	add	r0, sp, #24
   d62f0:	f7ff fbde 	bl	d5ab0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d62f4:	9b00      	ldr	r3, [sp, #0]
   d62f6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d62f8:	7863      	ldrb	r3, [r4, #1]
   d62fa:	2b02      	cmp	r3, #2
   d62fc:	d104      	bne.n	d6308 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d62fe:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6300:	a806      	add	r0, sp, #24
   d6302:	f7ff f9eb 	bl	d56dc <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6306:	e026      	b.n	d6356 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6308:	2b0a      	cmp	r3, #10
   d630a:	d124      	bne.n	d6356 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d630c:	2211      	movs	r2, #17
   d630e:	4629      	mov	r1, r5
   d6310:	a801      	add	r0, sp, #4
   d6312:	f000 fb75 	bl	d6a00 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6316:	68a3      	ldr	r3, [r4, #8]
   d6318:	2b00      	cmp	r3, #0
   d631a:	d038      	beq.n	d638e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d631c:	f104 0308 	add.w	r3, r4, #8
   d6320:	f10d 0c04 	add.w	ip, sp, #4
   d6324:	3418      	adds	r4, #24
   d6326:	6818      	ldr	r0, [r3, #0]
   d6328:	6859      	ldr	r1, [r3, #4]
   d632a:	4662      	mov	r2, ip
   d632c:	c203      	stmia	r2!, {r0, r1}
   d632e:	3308      	adds	r3, #8
   d6330:	42a3      	cmp	r3, r4
   d6332:	4694      	mov	ip, r2
   d6334:	d1f7      	bne.n	d6326 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6336:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6338:	a901      	add	r1, sp, #4
   d633a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d633c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6340:	f7ff fbc4 	bl	d5acc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6344:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6348:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d634c:	ac07      	add	r4, sp, #28
   d634e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6350:	f8dc 3000 	ldr.w	r3, [ip]
   d6354:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6356:	a806      	add	r0, sp, #24
   d6358:	f7ff fbca 	bl	d5af0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d635c:	b180      	cbz	r0, d6380 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d635e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6360:	ad07      	add	r5, sp, #28
   d6362:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6366:	4b12      	ldr	r3, [pc, #72]	; (d63b0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6368:	930c      	str	r3, [sp, #48]	; 0x30
   d636a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d636c:	ac0d      	add	r4, sp, #52	; 0x34
   d636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6370:	682b      	ldr	r3, [r5, #0]
   d6372:	7023      	strb	r3, [r4, #0]
   d6374:	463a      	mov	r2, r7
   d6376:	4643      	mov	r3, r8
   d6378:	a90c      	add	r1, sp, #48	; 0x30
   d637a:	4630      	mov	r0, r6
   d637c:	47c8      	blx	r9
   d637e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6380:	9800      	ldr	r0, [sp, #0]
   d6382:	f7fe fdfb 	bl	d4f7c <netdb_freeaddrinfo>
}
   d6386:	4628      	mov	r0, r5
   d6388:	b013      	add	sp, #76	; 0x4c
   d638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d638e:	68e3      	ldr	r3, [r4, #12]
   d6390:	2b00      	cmp	r3, #0
   d6392:	d1c3      	bne.n	d631c <_ZN9TCPClient7connectEPKctm+0x64>
   d6394:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6398:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d639c:	f7fe fe76 	bl	d508c <inet_htonl>
   d63a0:	4581      	cmp	r9, r0
   d63a2:	d1bb      	bne.n	d631c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d63a4:	f104 0114 	add.w	r1, r4, #20
   d63a8:	e7aa      	b.n	d6300 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d63aa:	4625      	mov	r5, r4
   d63ac:	e7e8      	b.n	d6380 <_ZN9TCPClient7connectEPKctm+0xc8>
   d63ae:	bf00      	nop
   d63b0:	000d7190 	.word	0x000d7190

000d63b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63b4:	2200      	movs	r2, #0
   d63b6:	6840      	ldr	r0, [r0, #4]
   d63b8:	4611      	mov	r1, r2
   d63ba:	f7fe bfeb 	b.w	d5394 <network_ready>

000d63be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63be:	2200      	movs	r2, #0
   d63c0:	6840      	ldr	r0, [r0, #4]
   d63c2:	4611      	mov	r1, r2
   d63c4:	f7ff b806 	b.w	d53d4 <network_listening>

000d63c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d63c8:	2200      	movs	r2, #0
   d63ca:	6840      	ldr	r0, [r0, #4]
   d63cc:	4611      	mov	r1, r2
   d63ce:	f7ff b811 	b.w	d53f4 <network_get_listen_timeout>

000d63d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d63d2:	6840      	ldr	r0, [r0, #4]
   d63d4:	2200      	movs	r2, #0
   d63d6:	f7ff b805 	b.w	d53e4 <network_set_listen_timeout>

000d63da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63da:	6840      	ldr	r0, [r0, #4]
   d63dc:	2200      	movs	r2, #0
   d63de:	f081 0101 	eor.w	r1, r1, #1
   d63e2:	f7fe bfef 	b.w	d53c4 <network_listen>

000d63e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d63e6:	2300      	movs	r3, #0
   d63e8:	6840      	ldr	r0, [r0, #4]
   d63ea:	461a      	mov	r2, r3
   d63ec:	4619      	mov	r1, r3
   d63ee:	f7fe bfe1 	b.w	d53b4 <network_off>

000d63f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63f2:	2200      	movs	r2, #0
   d63f4:	6840      	ldr	r0, [r0, #4]
   d63f6:	4611      	mov	r1, r2
   d63f8:	f7fe bfbc 	b.w	d5374 <network_connecting>

000d63fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63fc:	6840      	ldr	r0, [r0, #4]
   d63fe:	2200      	movs	r2, #0
   d6400:	2102      	movs	r1, #2
   d6402:	f7fe bfbf 	b.w	d5384 <network_disconnect>

000d6406 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6406:	2300      	movs	r3, #0
   d6408:	6840      	ldr	r0, [r0, #4]
   d640a:	461a      	mov	r2, r3
   d640c:	f7fe bfaa 	b.w	d5364 <network_connect>

000d6410 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6410:	4b02      	ldr	r3, [pc, #8]	; (d641c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6412:	2204      	movs	r2, #4
   d6414:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6416:	4a02      	ldr	r2, [pc, #8]	; (d6420 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6418:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d641a:	4770      	bx	lr
   d641c:	2003e7c4 	.word	0x2003e7c4
   d6420:	000d72ac 	.word	0x000d72ac

000d6424 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6424:	2300      	movs	r3, #0
   d6426:	6840      	ldr	r0, [r0, #4]
   d6428:	461a      	mov	r2, r3
   d642a:	f7fe bf9b 	b.w	d5364 <network_connect>

000d642e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d642e:	6840      	ldr	r0, [r0, #4]
   d6430:	2200      	movs	r2, #0
   d6432:	2102      	movs	r1, #2
   d6434:	f7fe bfa6 	b.w	d5384 <network_disconnect>

000d6438 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6438:	2200      	movs	r2, #0
   d643a:	6840      	ldr	r0, [r0, #4]
   d643c:	4611      	mov	r1, r2
   d643e:	f7fe bf99 	b.w	d5374 <network_connecting>

000d6442 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6442:	2200      	movs	r2, #0
   d6444:	6840      	ldr	r0, [r0, #4]
   d6446:	4611      	mov	r1, r2
   d6448:	f7fe bfa4 	b.w	d5394 <network_ready>

000d644c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d644c:	2300      	movs	r3, #0
   d644e:	6840      	ldr	r0, [r0, #4]
   d6450:	461a      	mov	r2, r3
   d6452:	4619      	mov	r1, r3
   d6454:	f7fe bfa6 	b.w	d53a4 <network_on>

000d6458 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6458:	2300      	movs	r3, #0
   d645a:	6840      	ldr	r0, [r0, #4]
   d645c:	461a      	mov	r2, r3
   d645e:	4619      	mov	r1, r3
   d6460:	f7fe bfa8 	b.w	d53b4 <network_off>

000d6464 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6464:	6840      	ldr	r0, [r0, #4]
   d6466:	2100      	movs	r1, #0
   d6468:	f7fe bfcc 	b.w	d5404 <network_is_on>

000d646c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d646c:	6840      	ldr	r0, [r0, #4]
   d646e:	2100      	movs	r1, #0
   d6470:	f7fe bfd0 	b.w	d5414 <network_is_off>

000d6474 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6474:	6840      	ldr	r0, [r0, #4]
   d6476:	2200      	movs	r2, #0
   d6478:	f081 0101 	eor.w	r1, r1, #1
   d647c:	f7fe bfa2 	b.w	d53c4 <network_listen>

000d6480 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	2200      	movs	r2, #0
   d6484:	f7fe bfae 	b.w	d53e4 <network_set_listen_timeout>

000d6488 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6488:	2200      	movs	r2, #0
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	4611      	mov	r1, r2
   d648e:	f7fe bfb1 	b.w	d53f4 <network_get_listen_timeout>

000d6492 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6492:	2200      	movs	r2, #0
   d6494:	6840      	ldr	r0, [r0, #4]
   d6496:	4611      	mov	r1, r2
   d6498:	f7fe bf9c 	b.w	d53d4 <network_listening>

000d649c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d649c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d64a0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d64a2:	b095      	sub	sp, #84	; 0x54
   d64a4:	4616      	mov	r6, r2
   d64a6:	460d      	mov	r5, r1
   d64a8:	4607      	mov	r7, r0
    IPAddress addr;
   d64aa:	f7ff fb01 	bl	d5ab0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d64ae:	4621      	mov	r1, r4
   d64b0:	2218      	movs	r2, #24
   d64b2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d64b4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d64b6:	f000 faa3 	bl	d6a00 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d64ba:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d64bc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d64c0:	4621      	mov	r1, r4
   d64c2:	466b      	mov	r3, sp
   d64c4:	aa0c      	add	r2, sp, #48	; 0x30
   d64c6:	4630      	mov	r0, r6
   d64c8:	f7fe fd60 	bl	d4f8c <netdb_getaddrinfo>
    if (!r) {
   d64cc:	4604      	mov	r4, r0
   d64ce:	2800      	cmp	r0, #0
   d64d0:	d14c      	bne.n	d656c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64d2:	4602      	mov	r2, r0
   d64d4:	2101      	movs	r1, #1
   d64d6:	6868      	ldr	r0, [r5, #4]
   d64d8:	f7fe ff5c 	bl	d5394 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64e0:	4622      	mov	r2, r4
   d64e2:	6868      	ldr	r0, [r5, #4]
   d64e4:	f7fe ff56 	bl	d5394 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64ea:	4681      	mov	r9, r0
        bool ok = false;
   d64ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64ee:	2e00      	cmp	r6, #0
   d64f0:	d03c      	beq.n	d656c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d64f2:	2900      	cmp	r1, #0
   d64f4:	d13a      	bne.n	d656c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d64f6:	6873      	ldr	r3, [r6, #4]
   d64f8:	2b02      	cmp	r3, #2
   d64fa:	d003      	beq.n	d6504 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d64fc:	2b0a      	cmp	r3, #10
   d64fe:	d011      	beq.n	d6524 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6500:	69f6      	ldr	r6, [r6, #28]
   d6502:	e7f4      	b.n	d64ee <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6504:	f1b8 0f00 	cmp.w	r8, #0
   d6508:	d00a      	beq.n	d6520 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d650a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d650c:	a806      	add	r0, sp, #24
   d650e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6510:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6512:	f7ff fb1d 	bl	d5b50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6518:	1d3c      	adds	r4, r7, #4
   d651a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d651c:	682b      	ldr	r3, [r5, #0]
   d651e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6520:	4641      	mov	r1, r8
   d6522:	e7ed      	b.n	d6500 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6524:	f1b9 0f00 	cmp.w	r9, #0
   d6528:	d101      	bne.n	d652e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d652a:	4649      	mov	r1, r9
   d652c:	e7e8      	b.n	d6500 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d652e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6530:	2210      	movs	r2, #16
   d6532:	a801      	add	r0, sp, #4
   d6534:	f000 fa64 	bl	d6a00 <memset>
                    a.v = 6;
   d6538:	2306      	movs	r3, #6
   d653a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d653e:	ad01      	add	r5, sp, #4
   d6540:	f104 0308 	add.w	r3, r4, #8
   d6544:	3418      	adds	r4, #24
   d6546:	6818      	ldr	r0, [r3, #0]
   d6548:	6859      	ldr	r1, [r3, #4]
   d654a:	462a      	mov	r2, r5
   d654c:	c203      	stmia	r2!, {r0, r1}
   d654e:	3308      	adds	r3, #8
   d6550:	42a3      	cmp	r3, r4
   d6552:	4615      	mov	r5, r2
   d6554:	d1f7      	bne.n	d6546 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6556:	a901      	add	r1, sp, #4
   d6558:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d655a:	ad07      	add	r5, sp, #28
   d655c:	f7ff fab6 	bl	d5acc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6562:	1d3c      	adds	r4, r7, #4
   d6564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6566:	682b      	ldr	r3, [r5, #0]
   d6568:	7023      	strb	r3, [r4, #0]
   d656a:	e7de      	b.n	d652a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d656c:	9800      	ldr	r0, [sp, #0]
   d656e:	f7fe fd05 	bl	d4f7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6572:	4638      	mov	r0, r7
   d6574:	b015      	add	sp, #84	; 0x54
   d6576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d657c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d657c:	4b02      	ldr	r3, [pc, #8]	; (d6588 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d657e:	4a03      	ldr	r2, [pc, #12]	; (d658c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6580:	601a      	str	r2, [r3, #0]
   d6582:	2200      	movs	r2, #0
   d6584:	605a      	str	r2, [r3, #4]

} // spark
   d6586:	4770      	bx	lr
   d6588:	2003e7cc 	.word	0x2003e7cc
   d658c:	000d72e8 	.word	0x000d72e8

000d6590 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6590:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6592:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6594:	d902      	bls.n	d659c <pinAvailable+0xc>
    return false;
   d6596:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6598:	b002      	add	sp, #8
   d659a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d659c:	f1a0 030b 	sub.w	r3, r0, #11
   d65a0:	2b02      	cmp	r3, #2
   d65a2:	d81a      	bhi.n	d65da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d65a4:	4c17      	ldr	r4, [pc, #92]	; (d6604 <pinAvailable+0x74>)
   d65a6:	7821      	ldrb	r1, [r4, #0]
   d65a8:	f3bf 8f5b 	dmb	ish
   d65ac:	f011 0101 	ands.w	r1, r1, #1
   d65b0:	d10b      	bne.n	d65ca <pinAvailable+0x3a>
   d65b2:	4620      	mov	r0, r4
   d65b4:	9101      	str	r1, [sp, #4]
   d65b6:	f7fd fd7d 	bl	d40b4 <__cxa_guard_acquire>
   d65ba:	9901      	ldr	r1, [sp, #4]
   d65bc:	b128      	cbz	r0, d65ca <pinAvailable+0x3a>
   d65be:	4812      	ldr	r0, [pc, #72]	; (d6608 <pinAvailable+0x78>)
   d65c0:	f7fe ffb4 	bl	d552c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7fd fd7a 	bl	d40be <__cxa_guard_release>
   d65ca:	4b0f      	ldr	r3, [pc, #60]	; (d6608 <pinAvailable+0x78>)
   d65cc:	7818      	ldrb	r0, [r3, #0]
   d65ce:	f7fe fe2d 	bl	d522c <hal_spi_is_enabled>
   d65d2:	2800      	cmp	r0, #0
   d65d4:	d1df      	bne.n	d6596 <pinAvailable+0x6>
  return true; // 'pin' is available
   d65d6:	2001      	movs	r0, #1
   d65d8:	e7de      	b.n	d6598 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d65da:	2801      	cmp	r0, #1
   d65dc:	d809      	bhi.n	d65f2 <pinAvailable+0x62>
   d65de:	f000 f8a7 	bl	d6730 <_Z19__fetch_global_Wirev>
   d65e2:	2100      	movs	r1, #0
   d65e4:	7c00      	ldrb	r0, [r0, #16]
   d65e6:	f7fe fdc9 	bl	d517c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d65ea:	f080 0001 	eor.w	r0, r0, #1
   d65ee:	b2c0      	uxtb	r0, r0
   d65f0:	e7d2      	b.n	d6598 <pinAvailable+0x8>
   d65f2:	3809      	subs	r0, #9
   d65f4:	2801      	cmp	r0, #1
   d65f6:	d8ee      	bhi.n	d65d6 <pinAvailable+0x46>
   d65f8:	f7ff fb94 	bl	d5d24 <_Z22__fetch_global_Serial1v>
   d65fc:	7c00      	ldrb	r0, [r0, #16]
   d65fe:	f7fe fd85 	bl	d510c <hal_usart_is_enabled>
   d6602:	e7f2      	b.n	d65ea <pinAvailable+0x5a>
   d6604:	2003e5bc 	.word	0x2003e5bc
   d6608:	2003e5c0 	.word	0x2003e5c0

000d660c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d660c:	2823      	cmp	r0, #35	; 0x23
{
   d660e:	b538      	push	{r3, r4, r5, lr}
   d6610:	4604      	mov	r4, r0
   d6612:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6614:	d80a      	bhi.n	d662c <pinMode+0x20>
   d6616:	29ff      	cmp	r1, #255	; 0xff
   d6618:	d008      	beq.n	d662c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d661a:	f7ff ffb9 	bl	d6590 <pinAvailable>
   d661e:	b128      	cbz	r0, d662c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6620:	4629      	mov	r1, r5
   d6622:	4620      	mov	r0, r4
}
   d6624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6628:	f7fe bcc0 	b.w	d4fac <HAL_Pin_Mode>
}
   d662c:	bd38      	pop	{r3, r4, r5, pc}

000d662e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d662e:	b538      	push	{r3, r4, r5, lr}
   d6630:	4604      	mov	r4, r0
   d6632:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6634:	f7fe fcc2 	bl	d4fbc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6638:	28ff      	cmp	r0, #255	; 0xff
   d663a:	d010      	beq.n	d665e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d663c:	2806      	cmp	r0, #6
   d663e:	d804      	bhi.n	d664a <digitalWrite+0x1c>
   d6640:	234d      	movs	r3, #77	; 0x4d
   d6642:	fa23 f000 	lsr.w	r0, r3, r0
   d6646:	07c3      	lsls	r3, r0, #31
   d6648:	d409      	bmi.n	d665e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d664a:	4620      	mov	r0, r4
   d664c:	f7ff ffa0 	bl	d6590 <pinAvailable>
   d6650:	b128      	cbz	r0, d665e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6652:	4629      	mov	r1, r5
   d6654:	4620      	mov	r0, r4
}
   d6656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d665a:	f7fe bcb7 	b.w	d4fcc <HAL_GPIO_Write>
}
   d665e:	bd38      	pop	{r3, r4, r5, pc}

000d6660 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6660:	b510      	push	{r4, lr}
   d6662:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6664:	f7fe fcaa 	bl	d4fbc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6668:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d666a:	b2db      	uxtb	r3, r3
   d666c:	2b01      	cmp	r3, #1
   d666e:	d908      	bls.n	d6682 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6670:	4620      	mov	r0, r4
   d6672:	f7ff ff8d 	bl	d6590 <pinAvailable>
   d6676:	b120      	cbz	r0, d6682 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6678:	4620      	mov	r0, r4
}
   d667a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d667e:	f7fe bcad 	b.w	d4fdc <HAL_GPIO_Read>
}
   d6682:	2000      	movs	r0, #0
   d6684:	bd10      	pop	{r4, pc}

000d6686 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6686:	280d      	cmp	r0, #13
{
   d6688:	b510      	push	{r4, lr}
   d668a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d668c:	bf9c      	itt	ls
   d668e:	340e      	addls	r4, #14
   d6690:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6692:	4620      	mov	r0, r4
   d6694:	f7ff ff7c 	bl	d6590 <pinAvailable>
   d6698:	b150      	cbz	r0, d66b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d669a:	2103      	movs	r1, #3
   d669c:	4620      	mov	r0, r4
   d669e:	f7fe fc7d 	bl	d4f9c <HAL_Validate_Pin_Function>
   d66a2:	2803      	cmp	r0, #3
   d66a4:	d104      	bne.n	d66b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d66a6:	4620      	mov	r0, r4
}
   d66a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d66ac:	f7fe bca6 	b.w	d4ffc <hal_adc_read>
}
   d66b0:	2000      	movs	r0, #0
   d66b2:	bd10      	pop	{r4, pc}

000d66b4 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d66b4:	b538      	push	{r3, r4, r5, lr}
   d66b6:	4604      	mov	r4, r0
   d66b8:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d66ba:	f7ff ff69 	bl	d6590 <pinAvailable>
   d66be:	b1f0      	cbz	r0, d66fe <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d66c0:	2104      	movs	r1, #4
   d66c2:	4620      	mov	r0, r4
   d66c4:	f7fe fc6a 	bl	d4f9c <HAL_Validate_Pin_Function>
   d66c8:	2804      	cmp	r0, #4
   d66ca:	d105      	bne.n	d66d8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d66cc:	b2a9      	uxth	r1, r5
   d66ce:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d66d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d66d4:	f7fe bc8a 	b.w	d4fec <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d66d8:	2102      	movs	r1, #2
   d66da:	4620      	mov	r0, r4
   d66dc:	f7fe fc5e 	bl	d4f9c <HAL_Validate_Pin_Function>
   d66e0:	2802      	cmp	r0, #2
   d66e2:	d10c      	bne.n	d66fe <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d66e4:	4620      	mov	r0, r4
   d66e6:	f7fe fc69 	bl	d4fbc <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d66ea:	2801      	cmp	r0, #1
   d66ec:	d001      	beq.n	d66f2 <_Z11analogWritetm+0x3e>
   d66ee:	2804      	cmp	r0, #4
   d66f0:	d105      	bne.n	d66fe <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d66f2:	4629      	mov	r1, r5
   d66f4:	4620      	mov	r0, r4
}
   d66f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d66fa:	f7fe bc87 	b.w	d500c <hal_pwm_write_ext>
}
   d66fe:	bd38      	pop	{r3, r4, r5, pc}

000d6700 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6700:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6702:	2300      	movs	r3, #0
   d6704:	2520      	movs	r5, #32
   d6706:	8043      	strh	r3, [r0, #2]
   d6708:	2314      	movs	r3, #20
{
   d670a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d670c:	8003      	strh	r3, [r0, #0]
   d670e:	6085      	str	r5, [r0, #8]
   d6710:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6712:	4906      	ldr	r1, [pc, #24]	; (d672c <_Z17acquireWireBufferv+0x2c>)
   d6714:	4628      	mov	r0, r5
   d6716:	f000 f83a 	bl	d678e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d671a:	4904      	ldr	r1, [pc, #16]	; (d672c <_Z17acquireWireBufferv+0x2c>)
	};
   d671c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d671e:	4628      	mov	r0, r5
   d6720:	f000 f835 	bl	d678e <_ZnajRKSt9nothrow_t>
	};
   d6724:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6726:	4620      	mov	r0, r4
   d6728:	bd38      	pop	{r3, r4, r5, pc}
   d672a:	bf00      	nop
   d672c:	000d731c 	.word	0x000d731c

000d6730 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6730:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6732:	4d0f      	ldr	r5, [pc, #60]	; (d6770 <_Z19__fetch_global_Wirev+0x40>)
   d6734:	7829      	ldrb	r1, [r5, #0]
   d6736:	f3bf 8f5b 	dmb	ish
   d673a:	f011 0401 	ands.w	r4, r1, #1
{
   d673e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6740:	d113      	bne.n	d676a <_Z19__fetch_global_Wirev+0x3a>
   d6742:	4628      	mov	r0, r5
   d6744:	f7fd fcb6 	bl	d40b4 <__cxa_guard_acquire>
   d6748:	b178      	cbz	r0, d676a <_Z19__fetch_global_Wirev+0x3a>
   d674a:	a801      	add	r0, sp, #4
   d674c:	f7ff ffd8 	bl	d6700 <_Z17acquireWireBufferv>
   d6750:	aa01      	add	r2, sp, #4
   d6752:	4621      	mov	r1, r4
   d6754:	4807      	ldr	r0, [pc, #28]	; (d6774 <_Z19__fetch_global_Wirev+0x44>)
   d6756:	f7ff fb3b 	bl	d5dd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d675a:	4628      	mov	r0, r5
   d675c:	f7fd fcaf 	bl	d40be <__cxa_guard_release>
   d6760:	4a05      	ldr	r2, [pc, #20]	; (d6778 <_Z19__fetch_global_Wirev+0x48>)
   d6762:	4906      	ldr	r1, [pc, #24]	; (d677c <_Z19__fetch_global_Wirev+0x4c>)
   d6764:	4803      	ldr	r0, [pc, #12]	; (d6774 <_Z19__fetch_global_Wirev+0x44>)
   d6766:	f000 f80b 	bl	d6780 <__aeabi_atexit>
	return wire;
}
   d676a:	4802      	ldr	r0, [pc, #8]	; (d6774 <_Z19__fetch_global_Wirev+0x44>)
   d676c:	b007      	add	sp, #28
   d676e:	bd30      	pop	{r4, r5, pc}
   d6770:	2003e7d8 	.word	0x2003e7d8
   d6774:	2003e7dc 	.word	0x2003e7dc
   d6778:	2003e5b8 	.word	0x2003e5b8
   d677c:	000d5d79 	.word	0x000d5d79

000d6780 <__aeabi_atexit>:
   d6780:	460b      	mov	r3, r1
   d6782:	4601      	mov	r1, r0
   d6784:	4618      	mov	r0, r3
   d6786:	f000 b91f 	b.w	d69c8 <__cxa_atexit>

000d678a <_ZdlPvj>:
   d678a:	f7fd bc86 	b.w	d409a <_ZdlPv>

000d678e <_ZnajRKSt9nothrow_t>:
   d678e:	f7fd bc82 	b.w	d4096 <_Znaj>
	...

000d6794 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6794:	4901      	ldr	r1, [pc, #4]	; (d679c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6796:	f000 b8f9 	b.w	d698c <_ZNKSt9type_infoeqERKS_>
   d679a:	bf00      	nop
   d679c:	000d7338 	.word	0x000d7338

000d67a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d67a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d67a2:	2400      	movs	r4, #0
   d67a4:	2310      	movs	r3, #16
   d67a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d67aa:	6803      	ldr	r3, [r0, #0]
   d67ac:	9400      	str	r4, [sp, #0]
   d67ae:	699e      	ldr	r6, [r3, #24]
   d67b0:	f88d 4004 	strb.w	r4, [sp, #4]
   d67b4:	4615      	mov	r5, r2
   d67b6:	466b      	mov	r3, sp
   d67b8:	6812      	ldr	r2, [r2, #0]
   d67ba:	47b0      	blx	r6
   d67bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d67c0:	f003 0306 	and.w	r3, r3, #6
   d67c4:	2b06      	cmp	r3, #6
   d67c6:	bf03      	ittte	eq
   d67c8:	9b00      	ldreq	r3, [sp, #0]
   d67ca:	602b      	streq	r3, [r5, #0]
   d67cc:	2001      	moveq	r0, #1
   d67ce:	4620      	movne	r0, r4
   d67d0:	b004      	add	sp, #16
   d67d2:	bd70      	pop	{r4, r5, r6, pc}

000d67d4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d67d4:	9800      	ldr	r0, [sp, #0]
   d67d6:	4290      	cmp	r0, r2
   d67d8:	bf14      	ite	ne
   d67da:	2001      	movne	r0, #1
   d67dc:	2006      	moveq	r0, #6
   d67de:	4770      	bx	lr

000d67e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d67e0:	b510      	push	{r4, lr}
   d67e2:	4b03      	ldr	r3, [pc, #12]	; (d67f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d67e4:	6003      	str	r3, [r0, #0]
   d67e6:	4604      	mov	r4, r0
   d67e8:	f000 f8cd 	bl	d6986 <_ZNSt9type_infoD1Ev>
   d67ec:	4620      	mov	r0, r4
   d67ee:	bd10      	pop	{r4, pc}
   d67f0:	000d7378 	.word	0x000d7378

000d67f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d67f4:	b510      	push	{r4, lr}
   d67f6:	4604      	mov	r4, r0
   d67f8:	f7ff fff2 	bl	d67e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d67fc:	4620      	mov	r0, r4
   d67fe:	2108      	movs	r1, #8
   d6800:	f7ff ffc3 	bl	d678a <_ZdlPvj>
   d6804:	4620      	mov	r0, r4
   d6806:	bd10      	pop	{r4, pc}

000d6808 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d680c:	461f      	mov	r7, r3
   d680e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6812:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6816:	4598      	cmp	r8, r3
   d6818:	4606      	mov	r6, r0
   d681a:	4615      	mov	r5, r2
   d681c:	d107      	bne.n	d682e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d681e:	9907      	ldr	r1, [sp, #28]
   d6820:	f000 f8b4 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d6824:	b118      	cbz	r0, d682e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6826:	7165      	strb	r5, [r4, #5]
   d6828:	2000      	movs	r0, #0
   d682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d682e:	4639      	mov	r1, r7
   d6830:	4630      	mov	r0, r6
   d6832:	f000 f8ab 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d6836:	2800      	cmp	r0, #0
   d6838:	d0f6      	beq.n	d6828 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d683a:	2301      	movs	r3, #1
   d683c:	f8c4 8000 	str.w	r8, [r4]
   d6840:	7125      	strb	r5, [r4, #4]
   d6842:	71a3      	strb	r3, [r4, #6]
   d6844:	e7f0      	b.n	d6828 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6846 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6846:	b538      	push	{r3, r4, r5, lr}
   d6848:	4615      	mov	r5, r2
   d684a:	461c      	mov	r4, r3
   d684c:	f000 f89e 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d6850:	b120      	cbz	r0, d685c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6852:	2308      	movs	r3, #8
   d6854:	60e3      	str	r3, [r4, #12]
   d6856:	2306      	movs	r3, #6
   d6858:	6025      	str	r5, [r4, #0]
   d685a:	7123      	strb	r3, [r4, #4]
   d685c:	bd38      	pop	{r3, r4, r5, pc}

000d685e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d685e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6860:	4605      	mov	r5, r0
   d6862:	460c      	mov	r4, r1
   d6864:	9201      	str	r2, [sp, #4]
   d6866:	461e      	mov	r6, r3
   d6868:	f000 f890 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d686c:	b950      	cbnz	r0, d6884 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d686e:	2e03      	cmp	r6, #3
   d6870:	d808      	bhi.n	d6884 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6872:	6823      	ldr	r3, [r4, #0]
   d6874:	9a01      	ldr	r2, [sp, #4]
   d6876:	695b      	ldr	r3, [r3, #20]
   d6878:	4629      	mov	r1, r5
   d687a:	4620      	mov	r0, r4
   d687c:	b002      	add	sp, #8
   d687e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6882:	4718      	bx	r3
   d6884:	b002      	add	sp, #8
   d6886:	bd70      	pop	{r4, r5, r6, pc}

000d6888 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6888:	b510      	push	{r4, lr}
   d688a:	4b03      	ldr	r3, [pc, #12]	; (d6898 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d688c:	6003      	str	r3, [r0, #0]
   d688e:	4604      	mov	r4, r0
   d6890:	f7ff ffa6 	bl	d67e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6894:	4620      	mov	r0, r4
   d6896:	bd10      	pop	{r4, pc}
   d6898:	000d73d8 	.word	0x000d73d8

000d689c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d689c:	b510      	push	{r4, lr}
   d689e:	4604      	mov	r4, r0
   d68a0:	f7ff fff2 	bl	d6888 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d68a4:	4620      	mov	r0, r4
   d68a6:	210c      	movs	r1, #12
   d68a8:	f7ff ff6f 	bl	d678a <_ZdlPvj>
   d68ac:	4620      	mov	r0, r4
   d68ae:	bd10      	pop	{r4, pc}

000d68b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d68b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d68b2:	9f08      	ldr	r7, [sp, #32]
   d68b4:	4297      	cmp	r7, r2
   d68b6:	4605      	mov	r5, r0
   d68b8:	460e      	mov	r6, r1
   d68ba:	4614      	mov	r4, r2
   d68bc:	d00a      	beq.n	d68d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d68be:	68a8      	ldr	r0, [r5, #8]
   d68c0:	6802      	ldr	r2, [r0, #0]
   d68c2:	9708      	str	r7, [sp, #32]
   d68c4:	6a15      	ldr	r5, [r2, #32]
   d68c6:	4631      	mov	r1, r6
   d68c8:	4622      	mov	r2, r4
   d68ca:	46ac      	mov	ip, r5
   d68cc:	b003      	add	sp, #12
   d68ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d68d2:	4760      	bx	ip
   d68d4:	4619      	mov	r1, r3
   d68d6:	9301      	str	r3, [sp, #4]
   d68d8:	f000 f858 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d68dc:	9b01      	ldr	r3, [sp, #4]
   d68de:	2800      	cmp	r0, #0
   d68e0:	d0ed      	beq.n	d68be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d68e2:	2006      	movs	r0, #6
   d68e4:	b003      	add	sp, #12
   d68e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d68e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68ec:	460d      	mov	r5, r1
   d68ee:	4619      	mov	r1, r3
   d68f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d68f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d68f8:	4681      	mov	r9, r0
   d68fa:	4617      	mov	r7, r2
   d68fc:	4698      	mov	r8, r3
   d68fe:	f000 f845 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d6902:	b190      	cbz	r0, d692a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6904:	2d00      	cmp	r5, #0
   d6906:	6034      	str	r4, [r6, #0]
   d6908:	7137      	strb	r7, [r6, #4]
   d690a:	db09      	blt.n	d6920 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d690c:	1961      	adds	r1, r4, r5
   d690e:	458a      	cmp	sl, r1
   d6910:	bf0c      	ite	eq
   d6912:	2106      	moveq	r1, #6
   d6914:	2101      	movne	r1, #1
   d6916:	71b1      	strb	r1, [r6, #6]
   d6918:	2000      	movs	r0, #0
   d691a:	b001      	add	sp, #4
   d691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6920:	3502      	adds	r5, #2
   d6922:	d1f9      	bne.n	d6918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6924:	2301      	movs	r3, #1
   d6926:	71b3      	strb	r3, [r6, #6]
   d6928:	e7f6      	b.n	d6918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d692a:	4554      	cmp	r4, sl
   d692c:	d106      	bne.n	d693c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d692e:	4659      	mov	r1, fp
   d6930:	4648      	mov	r0, r9
   d6932:	f000 f82b 	bl	d698c <_ZNKSt9type_infoeqERKS_>
   d6936:	b108      	cbz	r0, d693c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6938:	7177      	strb	r7, [r6, #5]
   d693a:	e7ed      	b.n	d6918 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d693c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6940:	6803      	ldr	r3, [r0, #0]
   d6942:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6946:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d694a:	69dc      	ldr	r4, [r3, #28]
   d694c:	463a      	mov	r2, r7
   d694e:	4643      	mov	r3, r8
   d6950:	4629      	mov	r1, r5
   d6952:	46a4      	mov	ip, r4
   d6954:	b001      	add	sp, #4
   d6956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d695a:	4760      	bx	ip

000d695c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6960:	4607      	mov	r7, r0
   d6962:	460c      	mov	r4, r1
   d6964:	4615      	mov	r5, r2
   d6966:	461e      	mov	r6, r3
   d6968:	f7ff ff6d 	bl	d6846 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d696c:	b948      	cbnz	r0, d6982 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d696e:	68b8      	ldr	r0, [r7, #8]
   d6970:	6803      	ldr	r3, [r0, #0]
   d6972:	699f      	ldr	r7, [r3, #24]
   d6974:	462a      	mov	r2, r5
   d6976:	4633      	mov	r3, r6
   d6978:	4621      	mov	r1, r4
   d697a:	46bc      	mov	ip, r7
   d697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6980:	4760      	bx	ip
   d6982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6986 <_ZNSt9type_infoD1Ev>:
   d6986:	4770      	bx	lr

000d6988 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6988:	2000      	movs	r0, #0
   d698a:	4770      	bx	lr

000d698c <_ZNKSt9type_infoeqERKS_>:
   d698c:	4281      	cmp	r1, r0
   d698e:	b508      	push	{r3, lr}
   d6990:	d00e      	beq.n	d69b0 <_ZNKSt9type_infoeqERKS_+0x24>
   d6992:	6840      	ldr	r0, [r0, #4]
   d6994:	7803      	ldrb	r3, [r0, #0]
   d6996:	2b2a      	cmp	r3, #42	; 0x2a
   d6998:	d00c      	beq.n	d69b4 <_ZNKSt9type_infoeqERKS_+0x28>
   d699a:	6849      	ldr	r1, [r1, #4]
   d699c:	780b      	ldrb	r3, [r1, #0]
   d699e:	2b2a      	cmp	r3, #42	; 0x2a
   d69a0:	bf08      	it	eq
   d69a2:	3101      	addeq	r1, #1
   d69a4:	f000 f858 	bl	d6a58 <strcmp>
   d69a8:	fab0 f080 	clz	r0, r0
   d69ac:	0940      	lsrs	r0, r0, #5
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	2001      	movs	r0, #1
   d69b2:	e7fc      	b.n	d69ae <_ZNKSt9type_infoeqERKS_+0x22>
   d69b4:	2000      	movs	r0, #0
   d69b6:	e7fa      	b.n	d69ae <_ZNKSt9type_infoeqERKS_+0x22>

000d69b8 <atoi>:
   d69b8:	220a      	movs	r2, #10
   d69ba:	2100      	movs	r1, #0
   d69bc:	f000 b8ec 	b.w	d6b98 <strtol>

000d69c0 <atol>:
   d69c0:	220a      	movs	r2, #10
   d69c2:	2100      	movs	r1, #0
   d69c4:	f000 b8e8 	b.w	d6b98 <strtol>

000d69c8 <__cxa_atexit>:
   d69c8:	b510      	push	{r4, lr}
   d69ca:	4c05      	ldr	r4, [pc, #20]	; (d69e0 <__cxa_atexit+0x18>)
   d69cc:	4613      	mov	r3, r2
   d69ce:	b12c      	cbz	r4, d69dc <__cxa_atexit+0x14>
   d69d0:	460a      	mov	r2, r1
   d69d2:	4601      	mov	r1, r0
   d69d4:	2002      	movs	r0, #2
   d69d6:	f3af 8000 	nop.w
   d69da:	bd10      	pop	{r4, pc}
   d69dc:	4620      	mov	r0, r4
   d69de:	e7fc      	b.n	d69da <__cxa_atexit+0x12>
   d69e0:	00000000 	.word	0x00000000

000d69e4 <memcpy>:
   d69e4:	440a      	add	r2, r1
   d69e6:	4291      	cmp	r1, r2
   d69e8:	f100 33ff 	add.w	r3, r0, #4294967295
   d69ec:	d100      	bne.n	d69f0 <memcpy+0xc>
   d69ee:	4770      	bx	lr
   d69f0:	b510      	push	{r4, lr}
   d69f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d69fa:	4291      	cmp	r1, r2
   d69fc:	d1f9      	bne.n	d69f2 <memcpy+0xe>
   d69fe:	bd10      	pop	{r4, pc}

000d6a00 <memset>:
   d6a00:	4402      	add	r2, r0
   d6a02:	4603      	mov	r3, r0
   d6a04:	4293      	cmp	r3, r2
   d6a06:	d100      	bne.n	d6a0a <memset+0xa>
   d6a08:	4770      	bx	lr
   d6a0a:	f803 1b01 	strb.w	r1, [r3], #1
   d6a0e:	e7f9      	b.n	d6a04 <memset+0x4>

000d6a10 <srand>:
   d6a10:	b538      	push	{r3, r4, r5, lr}
   d6a12:	4b0d      	ldr	r3, [pc, #52]	; (d6a48 <srand+0x38>)
   d6a14:	681d      	ldr	r5, [r3, #0]
   d6a16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a18:	4604      	mov	r4, r0
   d6a1a:	b97b      	cbnz	r3, d6a3c <srand+0x2c>
   d6a1c:	2018      	movs	r0, #24
   d6a1e:	f7fe fd11 	bl	d5444 <malloc>
   d6a22:	4a0a      	ldr	r2, [pc, #40]	; (d6a4c <srand+0x3c>)
   d6a24:	4b0a      	ldr	r3, [pc, #40]	; (d6a50 <srand+0x40>)
   d6a26:	63a8      	str	r0, [r5, #56]	; 0x38
   d6a28:	e9c0 2300 	strd	r2, r3, [r0]
   d6a2c:	4b09      	ldr	r3, [pc, #36]	; (d6a54 <srand+0x44>)
   d6a2e:	6083      	str	r3, [r0, #8]
   d6a30:	230b      	movs	r3, #11
   d6a32:	8183      	strh	r3, [r0, #12]
   d6a34:	2201      	movs	r2, #1
   d6a36:	2300      	movs	r3, #0
   d6a38:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a3e:	2200      	movs	r2, #0
   d6a40:	611c      	str	r4, [r3, #16]
   d6a42:	615a      	str	r2, [r3, #20]
   d6a44:	bd38      	pop	{r3, r4, r5, pc}
   d6a46:	bf00      	nop
   d6a48:	2003e554 	.word	0x2003e554
   d6a4c:	abcd330e 	.word	0xabcd330e
   d6a50:	e66d1234 	.word	0xe66d1234
   d6a54:	0005deec 	.word	0x0005deec

000d6a58 <strcmp>:
   d6a58:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6a60:	2a01      	cmp	r2, #1
   d6a62:	bf28      	it	cs
   d6a64:	429a      	cmpcs	r2, r3
   d6a66:	d0f7      	beq.n	d6a58 <strcmp>
   d6a68:	1ad0      	subs	r0, r2, r3
   d6a6a:	4770      	bx	lr

000d6a6c <strlen>:
   d6a6c:	4603      	mov	r3, r0
   d6a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a72:	2a00      	cmp	r2, #0
   d6a74:	d1fb      	bne.n	d6a6e <strlen+0x2>
   d6a76:	1a18      	subs	r0, r3, r0
   d6a78:	3801      	subs	r0, #1
   d6a7a:	4770      	bx	lr

000d6a7c <strncpy>:
   d6a7c:	b510      	push	{r4, lr}
   d6a7e:	3901      	subs	r1, #1
   d6a80:	4603      	mov	r3, r0
   d6a82:	b132      	cbz	r2, d6a92 <strncpy+0x16>
   d6a84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6a88:	f803 4b01 	strb.w	r4, [r3], #1
   d6a8c:	3a01      	subs	r2, #1
   d6a8e:	2c00      	cmp	r4, #0
   d6a90:	d1f7      	bne.n	d6a82 <strncpy+0x6>
   d6a92:	441a      	add	r2, r3
   d6a94:	2100      	movs	r1, #0
   d6a96:	4293      	cmp	r3, r2
   d6a98:	d100      	bne.n	d6a9c <strncpy+0x20>
   d6a9a:	bd10      	pop	{r4, pc}
   d6a9c:	f803 1b01 	strb.w	r1, [r3], #1
   d6aa0:	e7f9      	b.n	d6a96 <strncpy+0x1a>
	...

000d6aa4 <_strtol_l.isra.0>:
   d6aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6aa8:	4e3a      	ldr	r6, [pc, #232]	; (d6b94 <_strtol_l.isra.0+0xf0>)
   d6aaa:	4686      	mov	lr, r0
   d6aac:	468c      	mov	ip, r1
   d6aae:	4660      	mov	r0, ip
   d6ab0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6ab4:	5da5      	ldrb	r5, [r4, r6]
   d6ab6:	f015 0508 	ands.w	r5, r5, #8
   d6aba:	d1f8      	bne.n	d6aae <_strtol_l.isra.0+0xa>
   d6abc:	2c2d      	cmp	r4, #45	; 0x2d
   d6abe:	d133      	bne.n	d6b28 <_strtol_l.isra.0+0x84>
   d6ac0:	f89c 4000 	ldrb.w	r4, [ip]
   d6ac4:	f04f 0801 	mov.w	r8, #1
   d6ac8:	f100 0c02 	add.w	ip, r0, #2
   d6acc:	2b00      	cmp	r3, #0
   d6ace:	d05c      	beq.n	d6b8a <_strtol_l.isra.0+0xe6>
   d6ad0:	2b10      	cmp	r3, #16
   d6ad2:	d10c      	bne.n	d6aee <_strtol_l.isra.0+0x4a>
   d6ad4:	2c30      	cmp	r4, #48	; 0x30
   d6ad6:	d10a      	bne.n	d6aee <_strtol_l.isra.0+0x4a>
   d6ad8:	f89c 0000 	ldrb.w	r0, [ip]
   d6adc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6ae0:	2858      	cmp	r0, #88	; 0x58
   d6ae2:	d14d      	bne.n	d6b80 <_strtol_l.isra.0+0xdc>
   d6ae4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6ae8:	2310      	movs	r3, #16
   d6aea:	f10c 0c02 	add.w	ip, ip, #2
   d6aee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6af2:	3f01      	subs	r7, #1
   d6af4:	2600      	movs	r6, #0
   d6af6:	fbb7 f9f3 	udiv	r9, r7, r3
   d6afa:	4630      	mov	r0, r6
   d6afc:	fb03 7a19 	mls	sl, r3, r9, r7
   d6b00:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6b04:	2d09      	cmp	r5, #9
   d6b06:	d818      	bhi.n	d6b3a <_strtol_l.isra.0+0x96>
   d6b08:	462c      	mov	r4, r5
   d6b0a:	42a3      	cmp	r3, r4
   d6b0c:	dd24      	ble.n	d6b58 <_strtol_l.isra.0+0xb4>
   d6b0e:	1c75      	adds	r5, r6, #1
   d6b10:	d007      	beq.n	d6b22 <_strtol_l.isra.0+0x7e>
   d6b12:	4581      	cmp	r9, r0
   d6b14:	d31d      	bcc.n	d6b52 <_strtol_l.isra.0+0xae>
   d6b16:	d101      	bne.n	d6b1c <_strtol_l.isra.0+0x78>
   d6b18:	45a2      	cmp	sl, r4
   d6b1a:	db1a      	blt.n	d6b52 <_strtol_l.isra.0+0xae>
   d6b1c:	fb00 4003 	mla	r0, r0, r3, r4
   d6b20:	2601      	movs	r6, #1
   d6b22:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6b26:	e7eb      	b.n	d6b00 <_strtol_l.isra.0+0x5c>
   d6b28:	2c2b      	cmp	r4, #43	; 0x2b
   d6b2a:	bf08      	it	eq
   d6b2c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6b30:	46a8      	mov	r8, r5
   d6b32:	bf08      	it	eq
   d6b34:	f100 0c02 	addeq.w	ip, r0, #2
   d6b38:	e7c8      	b.n	d6acc <_strtol_l.isra.0+0x28>
   d6b3a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6b3e:	2d19      	cmp	r5, #25
   d6b40:	d801      	bhi.n	d6b46 <_strtol_l.isra.0+0xa2>
   d6b42:	3c37      	subs	r4, #55	; 0x37
   d6b44:	e7e1      	b.n	d6b0a <_strtol_l.isra.0+0x66>
   d6b46:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6b4a:	2d19      	cmp	r5, #25
   d6b4c:	d804      	bhi.n	d6b58 <_strtol_l.isra.0+0xb4>
   d6b4e:	3c57      	subs	r4, #87	; 0x57
   d6b50:	e7db      	b.n	d6b0a <_strtol_l.isra.0+0x66>
   d6b52:	f04f 36ff 	mov.w	r6, #4294967295
   d6b56:	e7e4      	b.n	d6b22 <_strtol_l.isra.0+0x7e>
   d6b58:	1c73      	adds	r3, r6, #1
   d6b5a:	d106      	bne.n	d6b6a <_strtol_l.isra.0+0xc6>
   d6b5c:	2322      	movs	r3, #34	; 0x22
   d6b5e:	f8ce 3000 	str.w	r3, [lr]
   d6b62:	4638      	mov	r0, r7
   d6b64:	b942      	cbnz	r2, d6b78 <_strtol_l.isra.0+0xd4>
   d6b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b6a:	f1b8 0f00 	cmp.w	r8, #0
   d6b6e:	d000      	beq.n	d6b72 <_strtol_l.isra.0+0xce>
   d6b70:	4240      	negs	r0, r0
   d6b72:	2a00      	cmp	r2, #0
   d6b74:	d0f7      	beq.n	d6b66 <_strtol_l.isra.0+0xc2>
   d6b76:	b10e      	cbz	r6, d6b7c <_strtol_l.isra.0+0xd8>
   d6b78:	f10c 31ff 	add.w	r1, ip, #4294967295
   d6b7c:	6011      	str	r1, [r2, #0]
   d6b7e:	e7f2      	b.n	d6b66 <_strtol_l.isra.0+0xc2>
   d6b80:	2430      	movs	r4, #48	; 0x30
   d6b82:	2b00      	cmp	r3, #0
   d6b84:	d1b3      	bne.n	d6aee <_strtol_l.isra.0+0x4a>
   d6b86:	2308      	movs	r3, #8
   d6b88:	e7b1      	b.n	d6aee <_strtol_l.isra.0+0x4a>
   d6b8a:	2c30      	cmp	r4, #48	; 0x30
   d6b8c:	d0a4      	beq.n	d6ad8 <_strtol_l.isra.0+0x34>
   d6b8e:	230a      	movs	r3, #10
   d6b90:	e7ad      	b.n	d6aee <_strtol_l.isra.0+0x4a>
   d6b92:	bf00      	nop
   d6b94:	000d7412 	.word	0x000d7412

000d6b98 <strtol>:
   d6b98:	4613      	mov	r3, r2
   d6b9a:	460a      	mov	r2, r1
   d6b9c:	4601      	mov	r1, r0
   d6b9e:	4802      	ldr	r0, [pc, #8]	; (d6ba8 <strtol+0x10>)
   d6ba0:	6800      	ldr	r0, [r0, #0]
   d6ba2:	f7ff bf7f 	b.w	d6aa4 <_strtol_l.isra.0>
   d6ba6:	bf00      	nop
   d6ba8:	2003e554 	.word	0x2003e554

000d6bac <dynalib_user>:
   d6bac:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d6bbc:	00000000 61666564 20746c75 42534d00     ....default .MSB
   d6bcc:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d6bdc:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d6bec:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   d6bfc:	45444f4d 003e7525 25006925 6900696c     MODE%u>.%i.%li.i
   d6c0c:	756f006e 77700074 7764006d 00776100     n.out.pwm.dw.aw.
   d6c1c:	79484578 795a314a 37497767 6347584f     xEHyJ1ZygwI7OXGc
   d6c2c:	4c652d39 574b3367 3452614d 356c3778     9-eLg3KWMaR4x7l5
   d6c3c:	74657300 75537075 73656363 64253d73     .setupSuccess=%d
   d6c4c:	00777600 252c6425 64252c64 206f6e00     .vw.%d,%d,%d.no 
   d6c5c:	706d6173 0000656c                       sample..

000d6c64 <_ZTVN8particle11SPISettingsE>:
	...
   d6c6c:	000d4155 000d40c5 000d40c7              UA...@...@..

000d6c78 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d6c78:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d6c88:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d6c98:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d6ca8:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d6cb8:	32203720 20313230 333a3131 37353a38      7 2021 11:38:57
   d6cc8:	64000000 63697665 6f6e2065 6f662074     ...device not fo
   d6cd8:	00646e75                                und.

000d6cdc <_ZTV6LIS3DH>:
	...
   d6cec:	000d4de9 000d40a1 000d40a1              .M...@...@..

000d6cf8 <_ZTV9LIS3DHSPI>:
	...
   d6d00:	000d4cd5 000d4cd7 000d4e0b 000d4d15     .L...L...N...M..
   d6d10:	000d4d57 000d4ce5 000d4cff              WM...L...L..

000d6d1c <_ZL22BlynkReadHandlerVector>:
   d6d1c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d2c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d3c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d4c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d5c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d6c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d7c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d8c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6d9c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6dac:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6dbc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6dcc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6ddc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6dec:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6dfc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e0c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e1c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e2c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e3c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e4c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e5c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e6c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e7c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e8c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6e9c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6eac:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6ebc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6ecc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6edc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6eec:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6efc:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..
   d6f0c:	000d4f4d 000d4f4d 000d4f4d 000d4f4d     MO..MO..MO..MO..

000d6f1c <_ZL23BlynkWriteHandlerVector>:
   d6f1c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f2c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f3c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f4c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f5c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f6c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f7c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f8c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6f9c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6fac:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6fbc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6fcc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6fdc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6fec:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d6ffc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d700c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d701c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d702c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d703c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d704c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d705c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d706c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d707c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d708c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d709c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70ac:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70bc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70cc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70dc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70ec:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d70fc:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..
   d710c:	000d4f4f 000d4f4f 000d4f4f 000d4f4f     OO..OO..OO..OO..

000d711c <_ZTVN5spark13EthernetClassE>:
	...
   d7124:	000d5503 000d54f9 000d54ef 000d54e5     .U...T...T...T..
   d7134:	000d54d9 000d54cd 000d6465 000d646d     .T...T..ed..md..
   d7144:	000d54c1 000d54b9 000d54af 000d54a5     .T...T...T...T..
   d7154:	000d649d                                .d..

000d7158 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7158:	18100800 38302820                       .... (08

000d7160 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7168:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d7178:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d7188 <_ZTV9IPAddress>:
	...
   d7190:	000d5a4d 000d5a3d 000d5a3f              MZ..=Z..?Z..

000d719c <_ZTV9USBSerial>:
	...
   d71a4:	000d5b71 000d5bd9 000d5baf 000d5745     q[...[...[..EW..
   d71b4:	000d5ba1 000d5b73 000d5b83 000d5bd3     .[..s[...[...[..
   d71c4:	000d5b93 000d5b6d                       .[..m[..

000d71cc <_ZTV11USARTSerial>:
	...
   d71d4:	000d5c7d 000d5ce9 000d5cc1 000d5745     }\...\...\..EW..
   d71e4:	000d5c91 000d5cad 000d5c9f 000d5cbb     .\...\...\...\..
   d71f4:	000d5c7f 000d5c83                       .\...\..

000d71fc <_ZTV7TwoWire>:
	...
   d7204:	000d5d79 000d5dc3 000d5d9b 000d5d7b     y]...]...]..{]..
   d7214:	000d5da3 000d5dab 000d5db3 000d5dbb     .]...]...]...]..
   d7224:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d7234:	203d2072 00006425                       r = %d..

000d723c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7244:	000d5e77 000d5e99 000d62b3 000d5ea7     w^...^...b...^..
   d7254:	000d5e79                                y^..

000d7258 <_ZTV9TCPClient>:
	...
   d7260:	000d5f25 000d5f59 000d5df5 000d5e0f     %_..Y_...]...^..
   d7270:	000d6149 000d5fbb 000d5f8d 000d5e39     Ia..._..._..9^..
   d7280:	000d6053 000d62b9 000d5fef 000d61fd     S`...b..._...a..
   d7290:	000d5e3b 000d5e6d 000d5e21 000d5eab     ;^..m^..!^...^..
   d72a0:	000d5f6d                                m_..

000d72a4 <_ZTVN5spark9WiFiClassE>:
	...
   d72ac:	000d6407 000d63fd 000d63f3 000d63b5     .d...c...c...c..
   d72bc:	000d58b9 000d63e7 000d6465 000d646d     .X...c..ed..md..
   d72cc:	000d63db 000d63d3 000d63c9 000d63bf     .c...c...c...c..
   d72dc:	000d649d                                .d..

000d72e0 <_ZTVN5spark12NetworkClassE>:
	...
   d72e8:	000d6425 000d642f 000d6439 000d6443     %d../d..9d..Cd..
   d72f8:	000d644d 000d6459 000d6465 000d646d     Md..Yd..ed..md..
   d7308:	000d6475 000d6481 000d6489 000d6493     ud...d...d...d..
   d7318:	000d649d                                .d..

000d731c <_ZSt7nothrow>:
	...

000d731d <_ZTSSt19_Sp_make_shared_tag>:
   d731d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d732d:	5f646572 00676174                        red_tag....

000d7338 <_ZTISt19_Sp_make_shared_tag>:
   d7338:	000d7378 000d731d                       xs...s..

000d7340 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7340:	000d73d8 000d734c 000d73fc              .s..Ls...s..

000d734c <_ZTSN10__cxxabiv117__class_type_infoE>:
   d734c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d735c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d736c:	00000045                                E...

000d7370 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7370:	00000000 000d7340 000d67e1 000d67f5     ....@s...g...g..
   d7380:	000d6989 000d6989 000d685f 000d67a1     .i...i.._h...g..
   d7390:	000d6847 000d6809 000d67d5              Gh...h...g..

000d739c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d739c:	000d73d8 000d73a8 000d7340              .s...s..@s..

000d73a8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d73a8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d73b8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d73c8:	456f666e 00000000                       nfoE....

000d73d0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d73d0:	00000000 000d739c 000d6889 000d689d     .....s...h...h..
   d73e0:	000d6989 000d6989 000d685f 000d67a1     .i...i.._h...g..
   d73f0:	000d695d 000d68e9 000d68b1              ]i...h...h..

000d73fc <_ZTISt9type_info>:
   d73fc:	000d7378 000d7404                       xs...t..

000d7404 <_ZTSSt9type_info>:
   d7404:	74397453 5f657079 6f666e69               St9type_info.

000d7411 <_ctype_>:
   d7411:	20202000 20202020 28282020 20282828     .         ((((( 
   d7421:	20202020 20202020 20202020 20202020                     
   d7431:	10108820 10101010 10101010 10101010      ...............
   d7441:	04040410 04040404 10040404 10101010     ................
   d7451:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7461:	01010101 01010101 01010101 10101010     ................
   d7471:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7481:	02020202 02020202 02020202 10101010     ................
   d7491:	00000020 00000000 00000000 00000000      ...............
	...

000d7512 <link_const_variable_data_end>:
	...

000d7514 <link_constructors_location>:
   d7514:	000d4c0d 	.word	0x000d4c0d
   d7518:	000d550d 	.word	0x000d550d
   d751c:	000d56a1 	.word	0x000d56a1
   d7520:	000d571d 	.word	0x000d571d
   d7524:	000d58c5 	.word	0x000d58c5
   d7528:	000d58d5 	.word	0x000d58d5
   d752c:	000d58fd 	.word	0x000d58fd
   d7530:	000d6411 	.word	0x000d6411
   d7534:	000d657d 	.word	0x000d657d

000d7538 <link_constructors_end>:
	...
